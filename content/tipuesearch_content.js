var tipuesearch = {"pages": [{'title': 'Introduction.', 'text': 'NFU-MDE-40823108-KAO,YU-CHE \n ⚡ ⚡MDE-CD2021⚡⚡ \n Query Github host status:\xa0 https://www.githubstatus.com/ \n cd2021 course repository:\xa0 https://github.com/mdecourse/cd2021 \n cd2021 course discussion:\xa0 https://github.com/mdecourse/cd2021/discussions \n cd2021 gitter:\xa0 https://gitter.im/mdecourse/cd2021 \n Other KMOLab courses:\xa0 http://mde.tw/ \n 20201/2/25--> Page creation \n ⚡ \n \xa0 This is my Github:\xa0 NFU-MDE-40823108-KAO,YU-CHE \n \xa0 \xa0 Collaborative product design internship for cd2021 \n \xa0 \xa0 \xa0\xa0 Warehouse: \xa0\xa0 cd 2021 Warehouse \n \xa0 \xa0 \xa0 Website: \xa0  cd 2021 Website \n \xa0 \xa0 \xa0\xa0 Group warehouse :\xa0 -- \n \xa0 \xa0 \xa0 Group website: -- \n \n ⚡ \n \xa0 This is a personal website:\xa0 \xa0 Godfather-Adolphe50-2021 \n \xa0 \xa0\xa0 Warehouse:\xa0 Godfather-Adolphe50-2021 Warehouse \n \xa0 \xa0\xa0 Website: \xa0 Godfather-Adolphe50-2021 Website \n \xa0 \xa0\xa0 Youtube: \xa0 Godfather Adolphe 50 \n ⚡ \n \xa0 An introduction to computer programs for the first course:\xa0 \xa0 cp2019 \n \xa0 \xa0 Warehouse:\xa0 cp 2019 Warehouse \xa0 \n \xa0 \xa0 Website:\xa0 c p 2019 Website \n \xa0 \xa0 \xa0 Group warehouse :\xa0 cp 2019ag5 Warehouse \n \xa0 \xa0\xa0 Group website:\xa0 cp 2019ag5 website \n ⚡ \n \xa0 Internet content management for the following courses:\xa0 \xa0 wcm2020 \n \xa0 \xa0 Warehouse:\xa0 wcm 2020 Warehouse \n \xa0 \xa0\xa0 Website:\xa0 wcm 2020 Website \n ⚡ \n \xa0 The second course computer-aided design practice:\xa0 \xa0 cad2020 \n \xa0 \xa0 Warehouse:\xa0 cad 2020 Warehouse \n \xa0 \xa0\xa0 Website:\xa0 cad 2020 Website \n \xa0 \xa0\xa0 Group warehouse : \xa0 cad 2020ag4 Warehouse \n \xa0 \xa0\xa0 Group website: \xa0 cad 2020ag4 website \n ⚡ \n \xa0 The second course collaborative product design practice:\xa0 \xa0 cd2021 \n \xa0 \xa0\xa0 Warehouse: \xa0\xa0 cd 2021 Warehouse \n \xa0 \xa0 Website: \xa0 \xa0 cd 2021 Website \n \xa0 \xa0\xa0 Group warehouse :\xa0 -- \n \xa0 \xa0 Group website: -- \n \n', 'tags': '', 'url': 'Introduction..html'}, {'title': 'KMOLab basis', 'text': 'About: \n 此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules \xa0 https://github.com/mdecourse/newcms.git \n \n', 'tags': '', 'url': 'KMOLab basis.html'}, {'title': 'Cmsimde create', 'text': 'Step1: \n \xa0  Go to \xa0 2021 可攜程式系統 First download the\xa0 下載 kmol2021_spring_v2.7z \xa0compressed file, and extract the file to the\xa0 \xa0 flash drive. \n Step2: \n \xa0\xa0 Set gitconfig and save this file in the home directory. First go to home and select the .config file. \n \n \n Step3: \n \xa0\xa0Drag the  .config file  to\xa0 (Untitled)-SciTE, modify the name and mailbox to your student ID. \n \n Step4: \n \xa0 Go to\xa0 https://github.com/mdecourse/cmstemplate , And click on the red box below. \n \n Step5: \n \xa0\xa0Establish cd2021 warehouse. \n \n Step6: \n \xa0\xa0After completing the cd 2021 storage, click the settings below. \n \n Step7: \n \xa0\xa0Slide to the GitHub Pages below to create GitHub Pages. \n \n Step8: \n \xa0\xa0Open cmd, and enter cd tmp Re-enter: git clone --recurse-submodules  https://github.com/40823108/cd2021.git \n \n Step9: \n \xa0\xa0Test whether the website is established. \n Y:\\tmp\\cd2021\\cmsimde>python wsgi.py \n \n Step10: \n \xa0\xa0Open the browser and enter https://localhost:9443, click Advanced. \n \n Step11: \n \xa0\xa0Click to continue. \n \n Step12: \n \xa0\xa0Click login. \n \n Step13: \n \xa0\xa0enter password. \n \n Step14: \n \xa0\xa0Can start editing the website. \n \n Step15: \n \xa0 Upload the file to github. \n Y:\\tmp\\cd2021>git add . \n \n Step16: \n \xa0\xa0 Y:\\tmp\\cd2021>git commit -m "add" \n \n Step17: \n \xa0\xa0\xa0\xa0 Y:\\tmp\\cd2021>git push \n \n Step18: \n \xa0\xa0Successfully established a website. \n \n \xa0 \n', 'tags': '', 'url': 'Cmsimde create.html'}, {'title': 'Python program', 'text': 'Python program: \n import csv\n   \n# read student list\nfilename = \'D:/1a/1alist.txt\'\nwith open(filename, encoding="utf-8") as f:\n    content = f.readlines()\n    student = [x.strip() for x in content]\n#print(content)\n#print(student)\n   \n# Timestamp, email, ????, url, score, desp, memo\n# 0, 1, 2, 3, 4, 5, 6\n#total = 0\n  \nall = {}\nwith open(\'D:/1a/1a.csv\', encoding="utf-8") as csv_file:\n    csv_reader = csv.reader(csv_file, delimiter=\',\')\n       \n    line_count = 0\n    for row in csv_reader:\n        if line_count == 0:\n            #print(f\'Column names are {", ".join(row)}\')\n            line_count += 1\n        else:\n            student_num = row[1].split("@")[0]\n            #print(student_num)\n            student_score = row[4]\n            #print(student_score)\n            try:\n                all.update({student_num: student_score})\n            except:\n                all.update({student_num: "error"})\n            #print(f\'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.\')\n            #print(f\'\\t{row[4]}\')\n            #total += int(row[4])\n            line_count += 1\n#print(all)\n#print(student)\n  \nfor i in student:\n       \n    #if i in all:\n        #pass\n    #else:\n        #print(str(i))\n       \n    try:\n        print(i + "\\t" + all[i])\n    except:\n        print(i + "\\t60")\n  \n   \n    #print(f\'Processed {line_count} lines.\')\n    #print("??=" + str(total/line_count)) \n Flask program: \n from flask import Flask\n   \napp = Flask(__name__)\n   \n@app.route(\'/\') \ndef hello_world():\n    return \'Hello, From Flask!\'\n   \nif __name__== \'__main__\': \n    app.run()\n \n', 'tags': '', 'url': 'Python program.html'}, {'title': 'SSH key produce', 'text': 'Open: \n \xa0 Y:/PuTTY-->puttygen.exe \n \n \xa0 Use puttygen to import the private key (id_rsa) and convert it into a format (.ppk) file that putty can understand. \n \xa0 After saving the (.ppk) file. \n \n \xa0 Use scite to open the public key (id_rsa.pub), go to the toolbar and find Options-->Wrap to see the complete file content. \n \n \xa0 The full content is as follows: \n \n \xa0 Go to storage-->seeting-->SSH and GPG keys, click New SSH key, paste the copied content and save it for use. \n \n', 'tags': '', 'url': 'SSH key produce.html'}, {'title': 'SSH putty settings', 'text': '\xa0 SSH Putty settings: \n \n \xa0 Please select the .ppk file for the line drawing. \n \n \xa0 Go back to the Session directory and press save to save. \n \n \xa0 Enter the folder you want to Push, then enter the \\tmp\\cd2021\\.git directory, modify the config file, and modify the string  url=https:\\\\github.com:40823108/cd2021.git \n \xa0 Modified to:  url=git@github.com:40823108/cd2021.git \n \n \xa0 The following is a record of successful use of SSH without password push. \n \n \n', 'tags': '', 'url': 'SSH putty settings.html'}, {'title': 'Leo Edit Blog', 'text': 'Step1: \n \xa0\xa0Open leo\xa0 ➜ Y:/tmp>leo \n \n Step2: \n \xa0\xa0After opening leo, search Disqus in the browser and add a forum. \n \n Step3: \n \xa0\xa0Click File\xa0 ➜ Open-Outline \n \n Step4: \n \xa0\xa0Y:\\tmp\\cd2021\\config>pelican.leo \n \n \n \n Step5: \n \xa0 Modify the data in the share. \n \n Step6: \n \xa0\xa0Modify the data in the remote. \n \n Step7: \n \xa0\xa0Edit template  ➜\xa0 @edit base.html \n \n Step8: \n \xa0\xa0Modify markdown. \n \n \n', 'tags': '', 'url': 'Leo Edit Blog.html'}, {'title': 'Leo Edit Reveal', 'text': 'Step1: \n \xa0\xa0Open leo\xa0 ➜ Y:/tmp>leo \n \n Step2: \n \xa0\xa0Click File\xa0 ➜ Open-Outline \n \n Step3: \n \xa0\xa0Y:\\tmp\\cd2021\\config>reveal.leo \n \n \n \n Step4: \n \xa0\xa0 You can start editing Reveal. \n \n', 'tags': '', 'url': 'Leo Edit Reveal.html'}, {'title': 'Synergy', 'text': '協同設計與版次管理能夠有效提升團隊工作效率，降低內容互相覆蓋，最終造成無法辨識是誰更改內容的情況。 \n 因協作者的工作與內容更動皆在獨立分支清清楚楚，責任歸屬的也就一目了然。 \n 分支出來的設計，在本次目標不需要，或許未來的項目可以用上。可以避免掉「當初做過，但改掉了，這次又要重做」這種事情發生。 \n \n 組長在倉儲Setting->Manage access->Invite a collaborato邀請協作者 \n 組員在自己倉儲中Setting->Manage access->Invite a collaborato組長(組員不用互邀) \n git clone --recurse-submodules https://github.com/a40823112/stage2-ag1.git stage2-ag1 (clone組長倉儲)\ncd stage2-ag1\ngit pull\ngit remote add 40823108 https://github.com/40823108/stage2-ag1.git (add自己倉儲)\ngit commit -m "test"\ngit push 40823108 (先推送至自己倉儲)\n//如果沒問題再推送至組倉儲\ngit push (推送至分組倉儲: https://github.com/a40823112/stage2-ag1.git)\n\n//***更改協同分組網站之前一定都要先git pull，如果直接更改會造成資料錯亂*** \n Step1: \n 先建立一個空倉儲 \n \n Step2: \n git clone --recurse-submodules\xa0 https://github.com/a40823112/stage2-ag1.git \n \n Step3: \n 點選倉儲中的Settings \n \n Step4: \n 點選左方列表中的Manage access \n \n Step5: \n 點選 Invite a collaboratot後邀請組長。 \n \n Step6: \n 創建Git Hub Page \n \n Step7: \n cd\xa0 stage2-ag1 \n git pull \n git remote add 40823108\xa0 https://github.com/40823108/stage2-ag1.git \xa0(add自己倉儲) \n git commit -m "test" \n git push 40823108 (先推送至自己倉儲) \n 如果沒問題再推送至分組倉儲 \n git push (推送至分組倉儲: https://github.com/a40823112/stage2-ag1.git) \n ***更改協同分組網站之前一定都要先git pull，如果直接更改會造成資料錯亂* \n \n', 'tags': '', 'url': 'Synergy.html'}, {'title': 'Coppeliasim basic', 'text': 'Coppeliasim裡有很多機械手臂、輪子之類的零件，可以提供我們搭建自己需要仿真的物體。 可以用lua函數或界面操作joint關節（即電機）運動，我們可以做正逆運動，軌跡規劃。 同時，它方便我們在其他地方調用api，支持跨平台運行，例如matlab、visual等，所以很適合用來驗證算法邏輯有沒有問題。 \n \n \n', 'tags': '', 'url': 'Coppeliasim basic.html'}, {'title': 'Import objects', 'text': 'Step1: \n \xa0 利用3D繪圖軟體(Autodesk Inventor Professional 2021),繪製所需物件。 \n \n Step2: \n \xa0\xa0並將其匯出成STL檔案, 可先將座標位置定好再做匯出(Z軸向上為佳) 以Inventor為例匯出STL檔案時須以另存成副本的方式,才能成功匯出STL檔案 步驟為:開啟Inventor-->開啟零件檔或組合檔-->檔案-->另存-->將副本儲存成... \n \n 將所需之STL檔案儲存至專案資料夾中。 \n \n Step3: \n \xa0\xa0開啟coppeliasim匯入物件,步驟為: File-->import-->Mesh... \n \n 匯入物件設定視窗。 \n \n 下圖為匯入選項之翻譯。 \n \n Step4: \n \xa0 匯入方法與設定操作。 \n \n \n', 'tags': '', 'url': 'Import objects.html'}, {'title': 'Divide object', 'text': '1.因匯入的STL檔案為單一物件,如果為組合圖所有零件匯以同一物件做匯入,必須將其作分解,使能得到所需零件數量。 \n \n 2.分解物件步驟為:\xa0 Edit-->Grouping/Merging-->Divide selected shapes : \n \n 下圖為分解物件功能區翻譯: \n \n 分解後可以得到下圖黃色區域的部分,將整個STL檔案切割出個別零件: \n \n 3.因匯入後軸向不同,為了方便之後放置joint需先將零件分解出來後再做軸向轉換 下圖為軸向轉換功能展示: \n \n 下圖為轉換後與coppeliasim軸向相同示意圖: \n \n 4.以下為操作展示: \n \n \n', 'tags': '', 'url': 'Divide object.html'}, {'title': 'Appearance setting', 'text': '1.可使用內部彈出視窗(Scene Object Properties)修改每個物件的顏色,需先選中需染色之物件在點選左方工具列中放大鏡的圖示即可使用內部彈出視窗 \n 2.修改顏色步驟為:\xa0 選中之物件--> Scene Object Properties-->shape-->Adjust color-->Ambient/diffuse component-->RGB\xa0 or\xa0 HSL-->Apply to selection \n 下圖為修改顏色視窗: \n \n 銳化屬性對話框: \n \n 一般屬性對話框: \n \n', 'tags': '', 'url': 'Appearance setting.html'}, {'title': 'Joint settings', 'text': '1.為了讓物件可以旋轉,所以需要加入joint. \n 2.點選左上的 Add-->joint-->Revolute 這樣就能叫出一個圓柱狀的軸，並生成在座標 0.0.0. 上。 \n 3.加入joint步驟為:\xa0 空白處滑鼠右鍵--> Add-->joint-->Revolute. \n 4.可使用物件彈出視窗修改joint之長度與直徑,還有一班屬性與動態屬性。 \n 5.新增完joint後,因物件與其無關聯所以須使用上方工具欄中Object/ltem Translation/Position--> Position(移動)指令,使物件與馬達位置相同後,再使用Object/ltem Translation/Position--> Position(旋轉)指令使馬達與物件軸向相同。 \n 下圖為Joint屬性對話框: \n \n 下圖為組裝測試圖: \n \n \n', 'tags': '', 'url': 'Joint settings.html'}, {'title': 'Orchestration objects', 'text': '1.在匯入的STL檔案中,將物件做分割後每個物件之間是毫無關聯的,所以如果為轉軸或關節處匯無法轉動 \n 2.在左方模型瀏覽器中,將所需之物件拖拉編排,相關連之物件需為同一數列,依裝配之順序將物件做排列,無關聯之物件無需做排列,只需依需求打開動態屬性 \n 3.排列方式用下方圖片做參考: \n \n \n', 'tags': '', 'url': 'Orchestration objects.html'}, {'title': 'Proximity sensor', 'text': 'Proximity sensor 為coppeliasim中的內建感測器(接近傳感器)。 \n 1.添加 Proximity sensor步驟為:Menu bar --> Add --> Proximity sensor --> Cone type \n 2.因匯入方向不同所以要使用移動指令與旋轉指令將接近傳感器調整至所需位置。 \n 3.修改 Proximity sensor(接近傳感器)的參數。 \n 4.最後再將 Proximity sensor(接近傳感器)放置到所需之物件下編排樹狀圖即可。 \n 下圖為添加畫面: \n \n 下圖為修改參數屬性對話框: \n \n 下圖為排列樹狀圖示意圖: \n \n', 'tags': '', 'url': 'Proximity sensor.html'}, {'title': 'Midterm', 'text': '以下頁籤為開學第一週(W1)~第九週(W9)之內容 \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'W1', 'text': 'The first stage of group collaborative internship: \n \xa0\xa0The weekly group report must include html, pdf and Youtube videos: \n \xa0 \xa0\xa0Thematic topic: \n \xa0 \xa0 \xa0\xa0Student ID of the first group member:  40823145 \n \xa0 \xa0 \xa0\xa0Student ID of the second group member:  40823108 \n \xa0 \xa0 \xa0\xa0Student ID of other group members: \n Internship tasks of each group: \n \xa0 1.The group leader’s Github account has established the group website for each group. However, in the process of ordering each class in W1, it is found that even if Ethercalc is used to synchronize the Internet collaboration method to allow the optional group members of each class to fill in the student ID of the group of two or two, but still If there is a lack of manual labor or an effective plan for automatically determining the order of each team, I hereby instruct each group to carry out their own collaborative product development project (W2-W4), this topic is listed as one of the mandatory topics, and each group is explained in detail The first stage that is considered the most efficient and the method and process of setting the order. \n \xa0 2.In addition, in order to allow each group to collaborate in the internship process at stage1, the team members can publish their work and experience reports during the W2-W4 process through the blog, indicating that Leo Editor can be used to assist Pelican in CMSiMDE to publish collaborative blogs. The purpose is to enable each group to fully display the blog records left by each stage during the collaboration period. However, this method must be familiar with the operation of Leo Editor, so the creation of a collaborative blog through Pelican, in addition to using Leo Editor to assist in setting and In addition to creating a pelican blog, this topic is also listed as the second of the mandatory topics for each group in the Stage1 collaborative product design process. Please explain in detail for each group when using or not using Leo Editor, each group member is setting and creating Problems and solutions that may be encountered or produced in the process of collaborative blogging. \n \n W1 completion items: \n \xa0\xa0Use cmstemplate to create a website, install Leo Editor, set the Pelican blog in CMSiMDE, and use the button command to convert the Pelican Markdown file, and save the blog super file into the blog directory. \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '\xa0 Project production started this week, and the subject of production was discussed with the team members. \n The following picture is the project that the group wants to do, the gripper of the robotic arm. \n \n We will use  Webots  to simulate the movement of the gripper. \n \n', 'tags': '', 'url': 'W2.html'}, {'title': 'Webots', 'text': 'Continuous research \n', 'tags': '', 'url': 'Webots.html'}, {'title': 'W3', 'text': 'Due to the complexity of the gripper of the robotic arm, we revised the direction of the question. \n The new title is: Lego-EV3 \xa0\xa0Through the connection between the building blocks, a variety of different institutions are made. This time, the car is the direction. \n The picture below is our ideal design: \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'work', 'text': 'The picture below is our ideal design: \n \n 2021/3/8 \n Draw the body \n \n 2021/3/9 \n Draw the match between the motor and the body \n \n 2021/3/11 \n Draw the connecting rod and the motor-body fit \n \n 2021/3/12 \n Complete picture \n \n \n \n', 'tags': '', 'url': 'work.html'}, {'title': 'W4', 'text': 'Group briefing \n Design Tools: Autodesk Inventor Proffessional 2021 \n Design motivation:\xa0Because I took a course in the last semester-Introduction to Electromechanical Optical System, I found it very interesting to play with this institution. I want to do additional design through computer simulation. \n 2D engineering drawing: \n \n 3D exploded view, BOM: \n \n 3D model: \n \n Simulation: \n \n \n \n Collaborative design method and process:\xa0Use google meet screen sharing for discussion and design. \n \n Design result:\xa0Because the size is customized, the scale is a big problem. In the simulation, the parts are too complicated, which leads to the need for simplification. \n Self-evaluation: 65 \n \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': "第五週分組專案開始，分組以第一次分組兩兩合併為主。 \n 組別為:stage2-ag1 \n 組員: \n 40823108-cd2021 \n 40823109 -cd2021 \n 40823112 -cd2021 \n 40823145 -cd2021 \n 本次專案沿用stage1-ag1之專案，為了讓模型能夠按照我們的意思做動，我們嘗試編寫Lua程式並以方向鍵進行控制。 \n 下方為第一次測試程式與模擬圖 \n \n Lua程式: \n threadFunction=function()\n    -- put your actuation code here\n while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do\n    -- Read the keyboard messages (make sure the focus is on the main window, scene view):\n        message,auxiliaryData=sim.getSimulatorMessage()\n        while message~=-1 do\n            if (message==sim.message_keypress) then\nif (auxiliaryData[1]==2007) then\n                -- up key\n                velocity=1000\n                torque=10000\n                Shape4 = 1000\n                Shape7 = 1000\n            end\n            if (auxiliaryData[1]==2008) then\n                -- down key\n                velocity=1000\n                torque=10000\n                Shape4 = 1000\n                Shape7 = 1000\n            end\n            if (auxiliaryData[1]==2009) then\n                -- left key\n                velocity=1000\n                torque=10000\n                Shape4 = 1000\n                Shape7 = 1000\n            end\n            if (auxiliaryData[1]==2010) then\n                -- right key\n                velocity=1000\n                torque=10000\n                Shape4 = 1000\n                Shape7 = 1000\n            end\n        end\n        message,auxiliaryData=sim.getSimulatorMessage()\n    end\n    if Shape4 == 1\n        then sim.setJointPosition(joint_1, 1000, orientation)\n    if Shape7 == 1\n        then sim.setJointPosition(joint_2, 1000, orientation)\n    end\n        sim.setJointTargetVelocity(joint,velocity)\n    end\n        joint_1=sim.getObjectHandle('joint_1')\n        joint_2=sim.getObjectHandle('joint_2')\n        Shape4=sim.getObjectHandle('Shape4')\n        Shape7=sim.getObjectHandle('Shape7')\n        velocity=0\n        torque=0\n        Shape4 = 0\n        Shape7 = 0\nend \n 因部分語法有誤，日後待除錯。 \n", 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': "經過一週的時間，我們將程式進行了修改，但還是有錯誤，無法讓機構以上下左右鍵的方式進行控制。 \n 下方為模擬圖: \n \n 第二次Lua程式測試: \n function sysCall_init()\n    -- do some initialization here\n    left_front_handle= sim.getObjectHandle('left_front')\n    left_back_handle= sim.getObjectHandle('left_back')\n    right_back_handle= sim.getObjectHandle('right_back')\n    right_front_handle= sim.getObjectHandle('right_front')\n    \n    joint_1_handle= sim.getObjectHandle('joint_1')\n    \n    joint_2_handle= sim.getObjectHandle('joint_2')\n    MaxVel=10\n    leftvelocity=0\n    rightvelocity=0\n    dVel=0.5;\n    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)\n    sim.setJointTargetVelocity(left_back_handle,leftvelocity)\n    sim.setJointTargetVelocity(right_back_handle,rightvelocity)\n    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)\nend\n\nfunction sysCall_actuation()\n    -- put your actuation code here\n    message,auxiliaryData=sim.getSimulatorMessage()\n    while message~=-1 do\n        if (message==sim.message_keypress) then\n            if (auxiliaryData[1]==32) then\n                -- right key\n                leftvelocity=0\n                rightvelocity=0\n                sim.setJointForce(left_front_handle, 0)\n                sim.setJointForce(left_back_handle, 0)\n                sim.setJointForce(right_back_handle, 0)\n                sim.setJointForce(right_front_handle, 0)\n                \n                \n                sim.setJointForce(joint_1_handle, 1000)\n                \n                sim.setJointForce(joint_2_handle, 1000)\n                break\n            else\n            --sim.setJointForce(left_front_handle, 10000)\n            sim.setJointForce(left_back_handle, 10000)\n            sim.setJointForce(right_back_handle, 10000)\n            --sim.setJointForce(right_front_handle, 10000)\n            \n            sim.setJointForce(joint_1_handle, 0)\n            \n            sim.setJointForce(joint_2_handle, 0)\n            end\n            if (auxiliaryData[1]==2007) then\n                -- up key\n                leftvelocity=(leftvelocity+rightvelocity)/2\n                rightvelocity=leftvelocity\n                leftvelocity=leftvelocity+dVel\n                rightvelocity=rightvelocity+dVel\n            end\n            if (auxiliaryData[1]==2008) then\n                -- down key\n                leftvelocity=(leftvelocity+rightvelocity)/2\n                rightvelocity=leftvelocity\n                leftvelocity=leftvelocity-dVel\n                rightvelocity=rightvelocity-dVel\n            end\n            if (auxiliaryData[1]==2009) then\n                -- left key\n                leftvelocity=leftvelocity-dVel\n                rightvelocity=rightvelocity+dVel\n            end\n            if (auxiliaryData[1]==2010) then\n                -- right key\n                leftvelocity=leftvelocity+dVel\n                rightvelocity=rightvelocity-dVel\n            end\n        end\n        message,auxiliaryData=sim.getSimulatorMessage()\n    end\n    \n    if leftvelocity>MaxVel then\n        leftvelocity=MaxVel\n    end\n    if leftvelocity<-MaxVel then\n        leftvelocity=-MaxVel\n    end\n    \n    if rightvelocity>MaxVel then\n                rightvelocity=MaxVel\n    end\n    if rightvelocity<-MaxVel then\n                rightvelocity=-MaxVel\n    end\n    \n    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)\n    sim.setJointTargetVelocity(left_back_handle,leftvelocity)\n    sim.setJointTargetVelocity(right_back_handle,rightvelocity)\n    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)\n    \nend\n\nfunction sysCall_sensing()\n    -- put your sensing code here\nend\n\nfunction sysCall_cleanup()\n    -- do some clean-up here\nend\n\n-- See the user manual or the available code snippets for additional callback functions and details \n 第二次程式失敗，日後將持續進除錯。 \n \n", 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': "經過前兩次的修改，最終我們成功完模擬，可以使用鍵盤的方向鍵對模型進行控制。 \n 下圖為模擬圖 \n \n 第三次Lua程式(成功) \n function sysCall_init() \n    left_front_handle= sim.getObjectHandle('left_m')\n    left_back_handle= sim.getObjectHandle('left_m')\n    right_back_handle= sim.getObjectHandle('right_m')\n    right_front_handle= sim.getObjectHandle('right_m')\n    MaxVel=2\n    leftvelocity=0\n    rightvelocity=0\n    dVel=0.5;\n    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)\n    sim.setJointTargetVelocity(left_back_handle,leftvelocity)\n    sim.setJointTargetVelocity(right_back_handle,rightvelocity)\n    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)\nend\n\nfunction sysCall_actuation() \n    message,auxiliaryData=sim.getSimulatorMessage()\n    while message~=-1 do\n        if (message==sim.message_keypress) then\n            if (auxiliaryData[1]==32) then\n                -- right key\n                leftvelocity=0\n                rightvelocity=0\n                sim.setJointForce(left_front_handle, 0)\n                sim.setJointForce(left_back_handle, 0)\n                sim.setJointForce(right_back_handle, 0)\n                sim.setJointForce(right_front_handle, 0)\n                break\n            else\n                --sim.setJointForce(left_front_handle, 10000)\n                sim.setJointForce(left_back_handle, 10000)\n                sim.setJointForce(right_back_handle, 10000)\n                --sim.setJointForce(right_front_handle, 10000)\n            end\n            if (auxiliaryData[1]==2007) then\n                -- up key\n                leftvelocity=(leftvelocity+rightvelocity)/2\n                rightvelocity=leftvelocity\n                leftvelocity=leftvelocity+dVel\n                rightvelocity=rightvelocity+dVel\n            end\n            if (auxiliaryData[1]==2008) then\n                -- down key\n                leftvelocity=(leftvelocity+rightvelocity)/2\n                rightvelocity=leftvelocity\n                leftvelocity=leftvelocity-dVel\n                rightvelocity=rightvelocity-dVel\n            end\n            if (auxiliaryData[1]==2009) then\n                -- left key\n                leftvelocity=leftvelocity-dVel\n                rightvelocity=rightvelocity+dVel\n            end\n            if (auxiliaryData[1]==2010) then\n                -- right key\n                leftvelocity=leftvelocity+dVel\n                rightvelocity=rightvelocity-dVel\n            end\n        end\n        message,auxiliaryData=sim.getSimulatorMessage()\n    end\n    \n    if leftvelocity>MaxVel then\n        leftvelocity=MaxVel\n    end\n    if leftvelocity<-MaxVel then\n        leftvelocity=-MaxVel\n    end\n    \n    if rightvelocity>MaxVel then\n                rightvelocity=MaxVel\n    end\n    if rightvelocity<-MaxVel then\n                rightvelocity=-MaxVel\n    end\n    \n    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)\n    sim.setJointTargetVelocity(left_back_handle,leftvelocity)\n    sim.setJointTargetVelocity(right_back_handle,rightvelocity)\n    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)\n    \nend  \n 成功使用方向鍵控制模型，下週將會加入視覺傳感器與力傳感器，讓模型在遇到物體時可以自動避開。 \n \n", 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '本週我們加入了力傳感器、視覺傳感器，讓模型在碰觸障礙物時，可以自行避開並選擇路徑上無障礙物之路線進行移動。 \n 下圖為模擬圖: \n \n 模型Lua: \n function sysCall_init()\n    \n    \nend\n\nfunction sysCall_actuation()\n    \nend\n\nfunction sysCall_sensing()\n    \nend\n\nfunction sysCall_cleanup()\n    \nend\n\n\n\nfunction sysCall_afterDelete(inData)\n    for key,value in pairs(inData.objectHandles) do\n        print("Object with handle "..key.." was deleted")\n    end\n    \nend\n\nfunction sysCall_afterCreate(inData)\n    for key,value in pairs(inData.objectHandles) do\n        print("Object with handle "..value.." was created")\n    end\nend\n--]]\nfunction speedChange_callback(ui,id,newVal)\n    speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100\nend\n\nfunction sysCall_init()\n    \n    bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self) \n    leftMotor=sim.getObjectHandle("bubbleRob_leftMotor") \n    rightMotor=sim.getObjectHandle("bubbleRob_rightMotor") \n    noseSensor=sim.getObjectHandle("bubbleRob_sensingNose") \n    minMaxSpeed={120*math.pi/180,300*math.pi/180} \n    backUntilTime=-1 \n   \n        xml = \'<ui title="\'..sim.getObjectName(bubbleRobBase)..\' speed" closeable="false" resizeable="false" activate="false">\'..[[\n        <hslider minimum="0" maximum="100" onchange="speedChange_callback" id="1"/>\n        <label text="" style="* {margin-left: 300px;}"/>\n        </ui>\n        ]]\n    ui=simUI.create(xml)\n    speed=(minMaxSpeed[1]+minMaxSpeed[2])*1\n    simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))\nend\n\nfunction sysCall_actuation()\n    result=sim.readProximitySensor(noseSensor) \n    \n    if (result>0) then backUntilTime=sim.getSimulationTime()+4 end \n\n    if (backUntilTime<sim.getSimulationTime()) then\n        \n        sim.setJointTargetVelocity(leftMotor,speed)\n        sim.setJointTargetVelocity(rightMotor,speed)\n    else\n        \n        sim.setJointTargetVelocity(leftMotor,-speed/5)\n        sim.setJointTargetVelocity(rightMotor,-speed/200)\n    end\nend\n\nfunction sysCall_cleanup()\n\tsimUI.destroy(ui)\nend \n 路徑Lua: \n require(\'graph_customization\') \n 力傳感器Lua: \n function sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend\n\nfunction sysCall_init()\nend\n\nfunction sysCall_trigger(inData)\n    -- callback function automatically added for backward compatibility\n    sim.breakForceSensor(inData.handle)\nend \n 視覺傳感器Lua: \n function sysCall_init()\nend\n\nfunction sysCall_vision(inData)\n    -- callback function automatically added for backward compatibility\n    -- (vision sensor have no filters anymore, but rather a callback function where image processing can be performed)\n    local retVal={}\n    retVal.trigger=false\n    retVal.packedPackets={}\n    simVision.sensorImgToWorkImg(inData.handle)\n    simVision.edgeDetectionOnWorkImg(inData.handle,0.200000)\n    simVision.workImgToSensorImg(inData.handle,false)\n    return retVal\nend\n \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W9', 'text': '期中考週，各分組進行 5-10 分鐘的網際 stage2 分組專案報告, 並透過 ShareX 錄製簡報影片 (簡報前後按下 Shift + PrintScreen, 並採全畫面錄影), 之後會將各組簡報影片送到 GDrive 公開展示, W15 之前將要求各組針對 stage1 與 stage2 的其他組別專案進行互評, 以供實際評分參考。 \n Group r epository :\xa0 stage2-ag1 \n Group website :\xa0 stage2-ag1 \n \n', 'tags': '', 'url': 'W9.html'}, {'title': 'Final', 'text': '以下頁籤為開學第十週(W10)~第十八週(W18)之內容 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'W10-task1', 'text': '利用國立虎尾科技科技大學機械設計工程系cd2021下的task1進行作業。 \n 讀取 stage3_2a.txt, 建立 Stage3 的分組倉儲, 分組網頁, 以及各組員倉儲及網頁連結. \n 已知 \xa0 stage3_2a.txt 內容, 以及初步資料讀取程式: \n 程式碼(version1): \xa0 \n # open file, default is read mode, since txt content no chinese char4\n# no encoding = "UTF- 08" is needed\nwith open("stage3_2a.txt") as fh:\n    # readlines will read into the whole line and put into list format 23\n    # has \\n at the end of each line 13\n    data = fh.readlines()\n#print(len(data))1\nfor i in range(len(data)):\n    group = data[i].rstrip("\\n").split("\\t")\n    print(\'<p>\'+group[0]+\'|<a href="https://\'+group[1]+\'.github.io/stage3-ag\'+group[0][9]+\'">網站</a>|<a href="https://github.com/\'+group[2]+\'/stage3-ag\'+group[0][9]+\'">倉儲</a></p>\')\n    for j in range(2,18,2):\n        print(\'<p>\'+group[j]+\'|Website:\'+\'<a href="https://\'+group[j]+\'.github.io/cd2021\'+\'">\'+group[j]+\'</a>\'+\'|Repository:\'+\'<a href="https://github.com/\'+group[j]+\'/cd2021\'+\'">\'+group[j]+\'</a></p>\') \n version1程式中檔案資料夾\xa0 stage3_2a.txt \xa0其中學號有誤，會導致排序有誤。 \n 程式碼(version2): \n # open file, default is read mode, since txt content no chinese char4\n# no encoding = "UTF-08" is needed\nwith open("stage3_2a.txt") as fh:\n    # readlines will read into the whole line and put into list format 23\n    # has \\n at the end of each line 13\n    data = fh.readlines()\n    data = [a.replace(\'4823122\',\'40823122\') for a in data]\n    data = [c.replace(\'\\t\\t\\t\\t\',\'\') for c in data]\n    print(data)\n#print(len(data))1\nfor i in range(len(data)):\n    group = data[i].rstrip("\\n").split("\\t")\n    print(\'<p>\'+group[0]+\'|<a href="https://\'+group[1]+\'.github.io/stage3-ag\'+group[0][9]+\'">網站</a>|<a href="https://github.com/\'+group[2]+\'/stage3-ag\'+group[0][9]+\'">倉儲</a></p>\')\n# the following will use group data to generate needed html\n  \n    for j in range(2,18,2):\n        try:\n            print(\'<p>\'+group[j]+\'|Website:\'+\'<a href="https://\'+group[j]+\'.github.io/cd2021\'+\'">\'+group[j]+\'</a>\'+\'|Repository:\'+\'<a href="https://github.com/\'+group[j]+\'/cd2021\'+\'">\'+group[j]+\'</a></p>\')\n        except:\n            continue \n version2程式中字串\xa0 \n with open("stage3_2a.txt") as fh: \n 字串為: \n 開啟檔案 stage3_2a \n data = fh.readlines() \n 字串為: \n 用於讀取所有行(直到結束)並返回列表，該列表可以由Python的for... in ...結構進行處理。 \n 如果碰到結束，則返回空字符串。 \n data = [a.replace(\'4823122\',\'40823122\') for a in data] \n 字串為: \n 把字符串中的old（舊字符串） 替換成new(新字符串)，如果指定第三個參數max，則替換不超過max 次，等於把 "4823112" 換成 "40823112" \n data = [c.replace(\'\\t\\t\\t\\t\',\'\') for c in data] \n 字串為: \n ( \'\\t\\t\\t\\t\' ,\'\')將排序出來的結果作空格 \n for i in range(len(data)):\n    group = data[i].rstrip("\\n").split("\\t") \n 字串為: \n 分析檔案範圍有六組，進行迴圈，變數為i \n 將data列表中第i項，去除元素\\n(換行)利用\\t(空格)分割變成元素(逗號自動補上) \n  print(\'<p>\'+group[0]+\'|<a href="https://\'+group[1]+\'.github.io/stage3-ag\'+group[0][9]+\'">網站</a>|<a href="https://github.com/\'+group[2]+\'/stage3-ag\'+group[0][9]+\'">倉儲</a></p>\') \n 字串為: \n group[0][9]=第0個第9位 \n 用print依序索引group list 中的元素，放入html格式，依序列出 \n for j in range(2,18,2): \n 字串為: \n 從2開始每次跳2格最多跳到16不可超過18 \n try:\n            print(\'<p>\'+group[j]+\'|Website:\'+\'<a href="https://\'+group[j]+\'.github.io/cd2021\'+\'">\'+group[j]+\'</a>\'+\'|Repository:\'+\'<a href="https://github.com/\'+group[j]+\'/cd2021\'+\'">\'+group[j]+\'</a></p>\')\n        except:\n            continue \n 用print依序索引group list 中的元素，放入html格式，依序列出來 \n \xa0 差別在於這行取組員的但因為有一組只有6人超出範圍所以一定會error。 \n 列出各分組倉儲, 分組網站與學員倉儲及學員網站連結: \n stage3_ag1 | \xa0 網站 \xa0 | \xa0 倉儲 \n 40823131 | Website: 40823131 \xa0 | Repository: 40823131 \xa0 | Group Website: 40823131 \n a40823112 | Website: a40823112 \xa0 | Repository: a40823112 \xa0 | Group Website: a40823112 \n 40823123 | Website: 40823123 \xa0 | Repository: 40823123 \xa0 | Group Website: 40823123 \n 40823145 | Website: 40823145 \xa0 | Repository: 40823145 \xa0 | Group Website: 40823145 \n 40823136 | Website: 40823136 \xa0 | Repository: 40823136 \xa0 | Group Website: 40823136 \n 40823109 | Website: 40823109 \xa0 | Repository: 40823109 \xa0 | Group Website: 40823109 \n 40823116 | Website: 40823116 \xa0 | Repository: 40823116 \xa0 | Group Website: 40823116 \n 40823108 | Website: 40823108 \xa0 | Repository: 40823108 \xa0 | Group Website: 40823108 \n stage3_ag2 | \xa0 網站 \xa0 | \xa0 倉儲 \n 40823151 | Website: 40823151 \xa0 | Repository: 40823151 \xa0 | Group Website: 40823151 \n 40623121 | Website: 40623121 \xa0 | Repository: 40623121 \xa0 | Group Website: 40623121 \n 40871106 | Website: 40871106 \xa0 | Repository: 40871106 \xa0 | Group Website: 40871106 \n 40823102 | Website: 40823102 \xa0 | Repository: 40823102 \xa0 | Group Website: 40823102 \n 40823104 | Website: 40823104 \xa0 | Repository: 40823104 \xa0 | Group Website: 40823104 \n 40823106 | Website: 40823106 \xa0 | Repository: 40823106 \xa0 | Group Website: 40823106 \n 40823101 | Website: 40823101 \xa0 | Repository: 40823101 \xa0 | Group Website: 40823101 \n 40823132 | Website: 40823132 \xa0 | Repository: 40823132 \xa0 | Group Website: 40823132 \n stage3_ag3 | \xa0 網站 \xa0 | \xa0 倉儲 \n 40823119 | Website: 40823119 \xa0 | Repository: 40823119 \xa0 | Group Website: 40823119 \n 40823150 | Website: 40823150 \xa0 | Repository: 40823150 \xa0 | Group Website: 40823150 \n 40823103 | Website: 40823103 \xa0 | Repository: 40823103 \xa0 | Group Website: 40823103 \n 40823107 | Website: 40823107 \xa0 | Repository: 40823107 \xa0 | Group Website: 40823107 \n 40523252 | Website: 40523252 \xa0 | Repository: 40523252 \xa0 | Group Website: 40523252 \n 40823154 | Website: 40823154 \xa0 | Repository: 40823154 \xa0 | Group Website: 40823154 \n stage3_ag4 | \xa0 網站 \xa0 | \xa0 倉儲 \n 40823142 | Website: 40823142 \xa0 | Repository: 40823142 \xa0 | Group Website: 40823142 \n 40823144 | Website: 40823144 \xa0 | Repository: 40823144 \xa0 | Group Website: 40823144 \n 40823127 | Website: 40823127 \xa0 | Repository: 40823127 \xa0 | Group Website: 40823127 \n 40823148 | Website: 40823148 \xa0 | Repository: 40823148 \xa0 | Group Website: 40823148 \n 40823121 | Website: 40823121 \xa0 | Repository: 40823121 \xa0 | Group Website: 40823121 \n 40823135 | Website: 40823135 \xa0 | Repository: 40823135 \xa0 | Group Website: 40823135 \n 40823114 | Website: 40823114 \xa0 | Repository: 40823114 \xa0 | Group Website: 40823114 \n 40823146 | Website: 40823146 \xa0 | Repository: 40823146 \xa0 | Group Website: 40823146 \n stage3_ag5 | \xa0 網站 \xa0 | \xa0 倉儲 \n 40823111 | Website: 40823111 \xa0 | Repository: 40823111 \xa0 | Group Website: 40823111 \n 40823115 | Website: 40823115 \xa0 | Repository: 40823115 \xa0 | Group Website: 40823115 \n 40823128 | Website: 40823128 \xa0 | Repository: 40823128 \xa0 | Group Website: 40823128 \n 40823120 | Website: 40823120 \xa0 | Repository: 40823120 \xa0 | Group Website: 40823120 \n 40823140 | Website: 40823140 \xa0 | Repository: 40823140 \xa0 | Group Website: 40823140 \n 40823124 | Website: 40823124 \xa0 | Repository: 40823124 \xa0 | Group Website: 40823124 \n 40823139 | Website: 40823139 \xa0 | Repository: 40823139 \xa0 | Group Website: 40823139 \n 40823126 | Website: 40823126 \xa0 | Repository: 40823126 \xa0 | Group Website: 40823126 \n stage3_ag6 | \xa0 網站 \xa0 | \xa0 倉儲 \n 40823152 | Website: 40823152 \xa0 | Repository: 40823152 \xa0 | Group Website: 40823152 \n 40823110 | Website: 40823110 \xa0 | Repository: 40823110 \xa0 | Group Website: 40823110 \n 40823122 | Website: 40823122 \xa0 | Repository: 40823122 \xa0 | Group Website: 40823122 \n 40823125 | Website: 40823125 \xa0 | Repository: 40823125 \xa0 | Group Website: 40823125 \n 40823117 | Website: 40823117 \xa0 | Repository: 40823117 \xa0 | Group Website: 40823117 \n 40823129 | Website: 40823129 \xa0 | Repository: 40823129 \xa0 | Group Website: 40823129 \n 40823149 | Website: 40823149 \xa0 | Repository: 40823149 \xa0 | Group Website: 40823149 \n 40823153 | Website: 40823153 \xa0 | Repository: 40823153 \xa0 | Group Website: 40823153 \n', 'tags': '', 'url': 'W10-task1.html'}, {'title': 'W11-task2', 'text': '執行Task2， stage1 與 stage2 所完成的 coppeliasim 場景, 採 Python remote API 進行操控, 並將過程拍成影片。 \n CoppeliaSim 使用\xa0 4.2.0 版 . \n 將stage1 與 stage2 所完成的coppeliasim場景, 使用 Python remote API 進行操控: \n \n \xa0CoppeliaSim 場景進行操控: \n 首先將下方紅框處的3個檔案與要執行的.ttt檔案放在同一個資寮夾。 \n \n 接下來將.Py檔放入(Untitled)-SciTE，並修改第一行為: sim as vrep，再將下方馬達換成對應名稱 \n \n 接下來將逞景整體加入腳本 \n \n 第一個腳本 \n \n simRemoteApi.start(19999) \n 第二個腳本 \n \n threadFunction=function()\n\t-- Put your thread code here (initialization and clean-up code should not be in here)\n\n\t\n\t-- Some EXTERNAL commands (e.g. socket commands provided by Lua libraries)\n\t-- might appear as blocking to the simulator. In that case, you can define\n\t-- a non-blocking section as following example shows:\n\t--\n\t-- sim.setThreadIsFree(true) -- Start of the non-blocking section\n\t--\n\t-- Following 2 lines are meant as an example of EXTERNAL blocking commands:\n\t-- http = require("socket.http")\n\t-- print(http.request("http://www.google.com"))\n\t--\n\t-- sim.setThreadIsFree(false) -- End of the non-blocking section\n\t--\n\t-- While in a non-blocking section, try to avoid calling sim-functions. Also\n\t-- never forget to close the blocking section, otherwise V-REP will hang.\n\t-- Make sure you read the information related to the sim.setThreadIsFree\n\t-- API function in V-REP\'s documentation.\n\n\n\t-- If you wish to synchronize a threaded loop with each simulation pass,\n\t-- set the thread switch timing in the initialization phase of this script\n\t-- to the maximum (200), and manually switch thread here with the\n\t-- sim.switchThread() command. \n\t-- ( sim.switchThread() will suspend this script\'s execution until next\n\t-- simulation pass, i.e. until the simulation time has changed )\n\t--\n\t-- Following example illustrates this:\n\t-- \n\t-- while true do\n\t--     local p=sim.getObjectPosition(objHandle,-1)\n\t--     p[1]=p[1]+0.001\n\t--     sim.setObjectPosition(objHandle,-1,p)\n\t--     sim.switchThread()\n\t-- end\nend\n\n-- Put some initialization code here:\nsim.setThreadSwitchTiming(2) -- Default timing for automatic thread switching\n\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n\tsim.addStatusbarMessage(\'Lua runtime error: \'..err)\nend\n\n-- Put some clean-up code here:\nsimRemoteApi.start(19999) \n 成功執行畫面 \n \n import sim as vrep\nimport sys\n# child threaded script: \n#simExtRemoteApiStart(19999)\n \nvrep.simxFinish(-1)\n \nclientID = vrep.simxStart(\'127.0.0.1\', 19999, True, True, 5000, 5)\n \nif clientID!= -1:\n    print("Connected to remote server")\nelse:\n    print(\'Connection not successful\')\n    sys.exit(\'Could not connect\')\n \nerrorCode,left_motor_handle=vrep.simxGetObjectHandle(clientID,\'left_m\',vrep.simx_opmode_oneshot_wait)\n \nerrorCode,right_motor_handle=vrep.simxGetObjectHandle(clientID,\'right_m\',vrep.simx_opmode_oneshot_wait)\n \nif errorCode == -1:\n    print(\'Can not find left or right motor\')\n    sys.exit()\n \nerrorCode=vrep.simxSetJointTargetVelocity(clientID,left_motor_handle,0, vrep.simx_opmode_oneshot_wait)\nerrorCode=vrep.simxSetJointTargetVelocity(clientID,right_motor_handle,2, vrep.simx_opmode_oneshot_wait) \n \n', 'tags': '', 'url': 'W11-task2.html'}, {'title': 'W12-task3', 'text': '下載\xa0 OBS \xa0並使用\xa0 Youtube \xa0進行直播， 每週各組按照組員順序, 於每堂課程時段, 輪流由 2-3 名同學開啟， 因帳號第一次直播需要24小時後才能開播，須於下次上課前準備好此功能。 \n 下圖為鎖定頁面: \n \n 下方為解鎖後測試結果: \n \n 下載\xa0 OBS \xa0，OBS軟體在擷取顯示器時是使用內顯，現在大部分筆電都有獨顯，所以在安裝玩OBS要擷取顯示器時會出現無法擷取顯示器的問題。 \n 以下講解如何解決顯示器無法擷取問題: \n Step1: \n \xa0 開啟顯示設定 \n \n Step2: \n \xa0 點選下方圖形設定 \n \n Step3: \n \xa0 點選瀏覽 \n \n Step4: \n \xa0 選取obs64.exe，因使用者不同路徑有所變化，個人之路徑為: \n \n Step5: \n \xa0 選完應用程式後，點選程式欄位下方選項的位置 \n \n Step6: \n \xa0 這時圖形偏好設定對話框會跳出此時點選省電模式並按下儲存，OBS就能擷取到顯示器。 \n 圖形偏好設定對話框有三個選項: \n 1.讓Windoes決定: 預設使用獨顯 \n 2.省電: 下方有標記是內顯 \n 3.高效能:\xa0 下方有標記是獨顯 \n 因 OBS軟體在擷取顯示器時是使用內顯，所以選取省電模式 \n \n Step7: \n \xa0 成功擷取 \n \n \n', 'tags': '', 'url': 'W12-task3.html'}, {'title': 'W13', 'text': '為因應校方公告: \n 「嚴重特殊傳染性肺炎」疫情課程彈性處理事項_遠距教學公告_0515D(中英版本).pdf \n 5月17日至5月30日全校所有課程改採遠距教學. \n 本課程將在 W13-W14 週採取同步線上模式上課, 修課人員應密切注意\xa0 https://gitter.im/mdecourse/cd2021 \xa0 上之公告, 線上同步上課將採 OBS + Youtube 配合 \xa0 https://meet.google.com \xa0 直播方式進行, \xa0 修課人員 必須事先登入 github 帳號與 @gm 電子郵箱帳號, 以便在課程直播網站上留言討論. \n 同步直播課程進行過程將指定各組員針對課程內容進行直播操作, 負責直播 修課人員 必須即時將直播網址公布於 \xa0 https://gitter.im/mdecourse/cd2021 , 以便與其他修課生及老師進行互動. \n 課程同步直播時段將與上課時段相同, 每段直播中間的暫停時間將視實際情況決定。 \n 與組員同步直播 \n \n RoboDK: \n 以下為robodk模擬: \n 1.先開啟start.bat \n 2.再開啟可攜版robodk路徑如下: \n F:\\robodk522_portable\\bin\\RoboDK.exe \n 3.點選robodk左上角開啟檔案選取:F:\\robodk522_portable\\examples\\pick_and_place\\pick_and_place_with_python.rdk \n 4開啟(Untitled-SciTE)並將下方路徑檔案放入F:\\robodk522_portable\\examples\\pick_and_place\\pick_and_place.py 點選Tools-->GO \n \n 下方為 pick_and_place.py檔: \n # KMOLab Portable RoboDK pick and place\nfrom robolink import *    # API to communicate with robodk\nfrom robodk import *      # robodk robotics toolbox\n\n# Setup global parameters\nBALL_DIAMETER = 100 # diameter of one ball\nAPPROACH = 100      # approach distance to grab each part, in mm\nnTCPs = 6           # number of TCP\'s in the tool\n\n#----------------------------------------------\n# Function definitions\n\ndef box_calc(BALLS_SIDE=4, BALLS_MAX=None):\n    """Calculate a list of points (ball center) as if the balls were stored in a box"""\n    if BALLS_MAX is None: BALLS_MAX = BALLS_SIDE**3\n    xyz_list = []\n    for h in range(BALLS_SIDE):\n        for i in range(BALLS_SIDE):\n            for j in range(BALLS_SIDE):\n                xyz_list = xyz_list + [[(i+0.5)*BALL_DIAMETER, (j+0.5)*BALL_DIAMETER, (h+0.5)*BALL_DIAMETER]]\n                if len(xyz_list) >= BALLS_MAX:\n                    return xyz_list\n    return xyz_list\n\ndef pyramid_calc(BALLS_SIDE=4):\n    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""\n    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)\n    BALL_DIAMETER = 100\n    xyz_list = []\n    sqrt2 = 2**(0.5)\n    for h in range(BALLS_SIDE):\n        for i in range(BALLS_SIDE-h):\n            for j in range(BALLS_SIDE-h):\n                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2\n                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]\n    return xyz_list\n\ndef balls_setup(frame, positions):\n    """Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""\n    nballs = len(positions)\n    step = 1.0/(nballs - 1)\n    for i in range(nballs):\n        newball = frame.Paste()\n        newball.setName(\'ball \' + str(i)) #set item name\n        newball.setPose(transl(positions[i])) #set item position with respect to parent\n        newball.setVisible(True, False) #make item visible but hide the reference frame\n        newball.Recolor([1-step*i, step*i, 0.2, 1]) #set RGBA color\n\ndef cleanup_balls(parentnodes):\n    """Delete all child items whose name starts with \\"ball\\", from the provided list of parent items."""\n    todelete = []\n    for item in parentnodes:\n        todelete = todelete + item.Childs()\n\n    for item in todelete:\n        if item.Name().startswith(\'ball\'):\n            item.Delete()\n\ndef TCP_On(toolitem, tcp_id):\n    """Attach the closest object to the toolitem Htool pose,\n    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""\n    toolitem.AttachClosest()\n    toolitem.RDK().RunMessage(\'Set air valve %i on\' % (tcp_id+1))\n    toolitem.RDK().RunProgram(\'TCP_On(%i)\' % (tcp_id+1));\n        \ndef TCP_Off(toolitem, tcp_id, itemleave=0):\n    """Detaches the closest object attached to the toolitem Htool pose,\n    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""\n    toolitem.DetachAll(itemleave)\n    toolitem.RDK().RunMessage(\'Set air valve %i off\' % (tcp_id+1))\n    toolitem.RDK().RunProgram(\'TCP_Off(%i)\' % (tcp_id+1));\n\n\n#----------------------------------------------------------\n# The program starts here:\n\n# Any interaction with RoboDK must be done through RDK:\nRDK = Robolink()\n\n# Turn off automatic rendering (faster)\nRDK.Render(False)\n\n#RDK.Set_Simulation_Speed(500); # set the simulation speed\n\n# Gather required items from the station tree\nrobot = RDK.Item(\'Fanuc M-710iC/50\')\nrobot_tools = robot.Childs()\n#robottool = RDK.Item(\'MainTool\')\nframe1 = RDK.Item(\'Table 1\')\nframe2 = RDK.Item(\'Table 2\')\n\n# Copy a ball as an object (same as CTRL+C)\nballref = RDK.Item(\'reference ball\')\nballref.Copy()\n\n# Run a pre-defined station program (in RoboDK) to replace the two tables\nprog_reset = RDK.Item(\'Replace objects\')\nprog_reset.RunProgram()\n\n# Call custom procedure to remove old objects\ncleanup_balls([frame1, frame2])\n\n# Make a list of positions to place the objects\nframe1_list = pyramid_calc(4)\nframe2_list = pyramid_calc(4)\n\n# Programmatically place the objects with a custom-made procedure\nballs_setup(frame1, frame1_list)\n\n# Delete previously generated tools\nfor tool in robot_tools:\n    if tool.Name().startswith(\'TCP\'):\n        tool.Delete()\n        \n# Calculate tool frames for the suction cup tool of 6 suction cups\nTCP_list = []\nfor i in range(nTCPs):\n    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)\n    TCPi = robot.AddTool(TCPi_pose, \'TCP %i\' % (i+1))\n    TCP_list.append(TCPi)\n\nTCP_0 = TCP_list[0]\n\n# Turn on automatic rendering\nRDK.Render(True)\n\n# Move balls    \nrobot.setPoseTool(TCP_list[0])\nnballs_frame1 = len(frame1_list)\nnballs_frame2 = len(frame2_list)\nidTake = nballs_frame1 - 1\nidLeave = 0\nidTCP = 0\ntarget_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)\n\nwhile idTake >= 0:\n    # ------------------------------------------------------------------\n    # first priority: grab as many balls as possible\n    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -> nTCPs)\n    ntake = min(nTCPs, idTake + 1)\n\n    # approach to frame 1\n    robot.setPoseFrame(frame1)\n    robot.setPoseTool(TCP_0)\n    robot.MoveJ([0,0,0,0,10,-200])\n    robot.MoveJ(target_app_frame)\n\n    # grab ntake balls from frame 1\n    for i in range(ntake):\n        TCPi = TCP_list[i]\n        robot.setPoseTool(TCPi)\n        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted\n        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)\n        target_app = target*transl(0,0,-APPROACH)\n        idTake = idTake - 1        \n        robot.MoveL(target_app)\n        robot.MoveL(target)\n        TCP_On(TCPi, i)\n        robot.MoveL(target_app)\n \n    # ------------------------------------------------------------------\n    # second priority: unload the tool     \n    # approach to frame 2 and place the tool balls into table 2\n    robot.setPoseTool(TCP_0)\n    robot.MoveJ(target_app_frame)\n    robot.MoveJ([0,0,0,0,10,-200])\n    robot.setPoseFrame(frame2)    \n    robot.MoveJ(target_app_frame)\n    for i in range(ntake):\n        TCPi = TCP_list[i]\n        robot.setPoseTool(TCPi)\n        if idLeave > nballs_frame2-1:\n            raise Exception("No room left to place objects in Table 2")\n        \n        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted\n        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)\n        target_app = target*transl(0,0,-APPROACH)\n        idLeave = idLeave + 1        \n        robot.MoveL(target_app)\n        robot.MoveL(target)\n        TCP_Off(TCPi, i, frame2)\n        robot.MoveL(target_app)\n\n    robot.MoveJ(target_app_frame)\n\n# Move home when the robot finishes\nrobot.MoveJ([0,0,0,0,10,-200])\n \n \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': '請簡化上列四軸機械手臂取放方塊零件的 Lua 程式, 去除客製化控制 plugin 語法部分, 且刪除其舊有的 GUI 程式控制介面, 改用 CoppeliaSim 制式的 Lua Script 編寫與原先取放方塊零件相同的操控流程. \n 請採用 CoppeliaSim \xa0 Qt based GUI 介面 , 改寫原 \xa0 MTB robot.ttm \xa0 模型中的 legacy GUI 介面視窗. \n \n', 'tags': '', 'url': 'W14.html'}, {'title': 'W15', 'text': "字幕翻譯與整理: \n First: \n \n \n We saw this simple two-link robot in the previous lecture about forward kinematics. \n 我們在前面看到了這個簡單的雙連桿機器人關於正向運動學的講座。 \n The tooltip pose of the robot is simply described by two numbers, coordinates x and y is relative to the world coordinate system. \n 該機器人的工具提示姿態由兩個數字簡單描述，坐標 x 和y 相對於世界坐標系。 \n So, the problem here is that given x and y, we have to determine the connecting angle Q1 and Q2. \n 所以，這裡的問題是給定 x 和 y，我們要確定連接角 Q1和Q2. \n The solution we will follow in this section is geometric one. \n 我們將在本節中遵循的解決方案是幾何解決方案。 \n We're going to start with a simple piece of construction. \n 我們將從一個簡單的結構開始。 \n We're going to overlay the red triangle on top of our robot. \n 我們將在我們的機器人頂部覆蓋紅色三角形。 \n We know that the end point coordinate is x, y, so the vertical height of the triangle is y,horizontal width is x. \n 我們知道終點坐標是x，y，所以三角形的垂直高度是y，水平寬度是x。 \n And, using Pythagoras theorem, we can write thagoras r squared equals x squared plus y squared. \n 並且，使用畢達哥拉斯定理，我們可以寫出 thagoras r 平方等於 x 平方加 y 平方。 \n So far.so easy \n 到目前爲止，很容易 \n Now, we're going to look at this triangle highlighted here in red and we want to determine the angle alpha. \n 現在，我們將查看此處以紅色突出顯示的三角形，我們要確定角度 alpha。 \n In order to do that, we need to use the cosine rule. \n 為了做到這一點，我們需要使用餘弦規則。 \n And, if you're a little rusty on the cosine rule, here is a bit of a refresher. \n 而且，如果你對余弦規則有點生疏，這裡有一點複習。 \n We have an arbitrary triangle. \n 我們有一個任意三角形。 \n We don't have to have any right angles in it and we're going to label the length of this edge as A and the angle opposite that edge, we're going to label as little a. \n 我們不必在其中有任何直角，我們將這條邊的長度標記為 A，而與該邊相對的角度，我們將標記為小 a。 \n And, we do the same for this edge and this angle, and this edge and this angle. \n 並且，我們對這條邊和這個角，以及這條邊和這個角做同樣的事情。 \n So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little a, little b, and little c. \n 因此，所有邊都標記為大寫字母 A、B 和 C，角標記為小 a、小 b 和小 c。 \n So, the cosine rule is simply this relationship here. \n 所以，餘弦規則就是這裡的這種關係。 \n It's a bit like Pythagoras' theorem except for this extra term on the end with the cos a in it. \n 它有點像畢達哥拉斯的定理，除了最後一個額外的術語，其中有 cos a。 \n Now, let's apply the cosine rule to the particular triangle we looked at a moment rul ago. \n 現在，讓我們將餘弦規則應用於我們剛才看到的特定三角形。 \n It's pretty straightforward to write down this particular relationship. \n 寫下這種特殊關係非常簡單。 \n We can isolate the term cos alpha which gives us the angle alpha that we're interested in. \n 我們可以分離出術語 cos alpha，它為我們提供了我們感興趣的角度 alpha。 \n And, it's defined in terms of the constant link lengths, A1 and A2 and the position of the end effector,x and y. \n 而且，它是根據恆定連桿長度 A1 和 A2 以及末端執行器的位置 x 和 y 定義的。 \n We can write this simple relationship between the angles alpha and Q2. \n 我們可以寫出角度 alpha 和 Q2 之間的這種簡單關係。 \n And, we know from the shape of the cosine function that cos of Q2 must be equal to negative of cos alpha. \n 而且，我們從餘弦函數的形狀知道，Q2 的 cos 必須等於 cos alpha 的負值。 \n This time, let's just write an expression for the cosine of the joined angle Q2. \n 這一次，讓我們為連接角 Q2 的餘弦寫一個表達式。 \n Now, we're going to draw yet another red triangle and we're going apply some simple trigonometry here. \n 現在，我們將繪製另一個紅色三角形，並在此處應用一些簡單的三角函數。 \n If we know Q2, then we know this length and this length of the red triangle. \n 如果我們知道 Q2，那麼我們就知道這個長度和這個紅色三角形的長度。 \n We can write this relationship for the sine of the joined angle Q2. \n 我們可以為連接角 Q2 的正弦寫出這種關係。 \n Now, we can consider this bigger triangle whose angle is beta and this side length of the triangle is given here in blue. \n 現在，我們可以考慮這個更大的三角形，它的角是β，三角形的這條邊長在這裡用藍色給出。 \n And, the length of the other side of the triangle is this. \n 並且，三角形另一邊的長度是這個。 \n So, now we can write an expression for the angle beta in terms of these parameters here. \n 所以，現在我們可以在此處根據這些參數編寫角度 beta 的表達式。 \n Going back to the red triangle that we drew earlier, we can establish a relationship between Q1 and the angle beta. \n 回到我們之前畫的紅色三角形，我們可以建立Q1和角度β之間的關係。 \n Introduce yet another angle, this one gamma and we can write a relationship between the angle gamma and the tooltip coordinates x and y. \n 引入另一個角度，這個伽馬，我們可以寫出角度伽馬和工具提示坐標 x 和 y 之間的關係。 \n Now, we can write a simple relationship between the angles that we've constructed, gamma and beta and the joined angle we're interested in which is Q1. \n 現在，我們可以在我們構建的角度 gamma 和 beta 與我們感興趣的連接角度 Q1 之間寫出一個簡單的關係。 \n And, the total relationship looks something like this. \n 而且，整個關係看起來像這樣。 \n Quite a complex relationship, it gives us the angle of joined one, that's Q1 in terms of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it's also a function of the second joint angle, Q2. \n 相當複雜的關係，它為我們提供了連接的角度，即根據末端執行器坐標 y 和 x 的 Q1，以及一系列常量 a1 和 a2，它也是第二個關節角度 Q2 的函數。 \n So, let's summarize what it is that we have derived here.1 \n 所以，讓我們總結一下我們在這裡得出的結論。1 \n We have an expression for the cosine of Q2 and we have an expression for Q1. \n 我們有 Q2 的餘弦表達式和 Q1 的表達式。 \n Now, the cosine function is symmetrical about 0. \n 現在，餘弦函數關於 0 對稱。 \n So, if we know the value of the cosine of Q2, then there are two possible solutions, a positive angle and a negative angle. \n 所以，如果我們知道 Q2 的餘弦值，那麼有兩種可能的解，一個正角和一個負角。 \n We're going to explicitly choose the positive angle, which means that I can write this expression here. \n 我們將明確選擇正角，這意味著我可以在這裡寫這個表達式。 \n And now, we have what we call the inverse kinematic solution for this two-link robot. \n 現在，我們有了這個雙連桿機器人的逆運動學解決方案。 \n We have an expression for the two joined angles, Q1 and Q2 in terms of the end effector pose x and y, and a bunch of constants. \n 我們有兩個連接角 Q1 和 Q2 的表達式，根據末端執行器姿勢 x 和 y 以及一系列常數。 \n You notice that the two equations are not independent. \n 你注意到這兩個方程不是獨立的。 \n The equation for Q1, in fact, depends on the solution for Q2. \n 事實上，Q1 的方程取決於 Q2 的解。 \n In this case, Q2 is negative and we're going to write the solution for Q2 with a negative sign in front of the inverse cosine. \n 在這種情況下，Q2 是負數，我們將在反餘弦前用負號編寫 Q2 的解。 \n Now, we need to solve for Q1, so we're going to introduce this particular red triangle, the angle beta that we solved previously, and the angle gamma which is defined in terms of y and x. \n 現在，我們需要求解 Q1，因此我們將介紹這個特定的紅色三角形、我們之前求解的角度 beta 以及根據 y 和 x 定義的角度 gamma。 \n Now, we write a slightly different relationship between q1, gamma and beta, different to what we had before. \n q1、ɣ和β之間的關西，和之前求的不同。 \n There’s a change of sign involved. \n 涉及到符號的變化。 \n Then, we can substitute all that previous equation and come up with this expression for q1. \n 然後我們可代換之前所有等式，並求得此q1方程式。 \n Again, there is a change of sign here. \n 同樣，這裡的符號發生了變化。 \n Previously, this was a negative sign. \n 先前，這是個負號。 \n And, here in summary form is the solution for the inverse kinematics of our two-link robot when it is in this particular configuration, where q2 is negative. \n 這是雙連桿機構在此逆向運動學的總形式，其中q2為負。 \n Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative. \n 讓我們比較兩個解決方案，q2為正和q2為負的情況。 \n \n \n Part two: \n \n Here we have the same two link robot as we just looked at but this time we're going tosolve it using an analytical approach , that is we're going to rely much more on algebra ,particular linear algebra rather than geometry . \n 這裡我們有與我們相同的兩個鏈接機器人只是看著，但這次我們要使用分析方法解決它，即我們是否會更多地依賴代數，特定的線性代數而不是幾何。 \n We have an expression E , which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture , we can write the endefector pose as a sequence of elementary homogeneous transformations . \n 我們有一個表達式 E，它是齊次的表示姿勢的變換 \n A rotation by Q1 , a translation along the X direction by A1 , a rotation by Q2 and then a translation in the X direction by A2 . \n Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移。 \n If I expand this out , multiply all the transformations together , I get the expression shown here ; a three by three homogeneous transformation matrix representing the pose of the robot's endefector. \n 如果我將其展開，將所有變換相乘，就會得到此處所示的表達式 E ;它是一個三乘三的齊次變換矩陣，表示機械手臂的最終的位置。 \n Now for this particular two link robot , we are only interested in the position of its endefector , it's X and Y co - ordinate and they are these two elements within the homogeneous transformation matrix , so I'm going to copy those out . \n 現在對於這個特殊的兩連桿機器人，我們只對它的最終位置感興趣，與它有關的是 X 和 Y 坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來。 \n So here again is our expression for X and Y and what we're going to do is a fairly common trick , we're going to square and add these two equations and I get a relationship that looks like this . \n 所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要將它平方並將這兩個方程相加，我得到一個看起來像這樣的關係式。 \n Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2. \n 現在我可以根據最終位置X和Y以及機械手臂的常數A1及A2來求出關節角度Q2。 \n Now what I'm going to do is apply the sum of angles identity . \n 現在我要做的是應用角度之和的特性。 \n I'm going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where ever I had sine Q2, I'm going to write S2. \n 我將展開這些項，Q1 的正弦加 Q2 或 Q1 的餘弦加 Q2，為了讓生活更輕鬆一點，我將建立一些分部，所以只要有 cos Q2，我會將其取代為C2並且在有正弦Q2的地方，我會將其取代為S2。 \n It's a fairly common shorthand when people are looking at robot kinematic equations. \n 當人們解決機械手臂運動學方程式時，這是一個相當常見的快速記法。 \n And here are the equations after making those substitutions. \n 這是進行替換後的方程式。 \n Looking at these two equations, I can see that they fall into a very well known form and for that form there is a very well known solution. \n 看看這兩個方程式，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個淺顯易見的解決方案。 \n So I'm going to consider just one of the equations, the equation for Y and using our well known identity and it's solution, I can determine the values for the variables little a, little b and little c and once l've determined those, then I can just write down the solution for Q1, which x is the equivalent of theta in this particular case. \n 所以我將只考慮其中一個方程，Y 的方程，並使用我們眾所周知的恆等式和它的解，我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些，然後我可以寫下 Q1 的解決方程，在這種特殊情況下，x 相當於 \xa0 θ 。 \n Here again is our expression for Q1, copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; X squared plus Y squared is equal to this particular complex expression. \n 這裡再次是我們對 Q1 的表達，從上一張幻燈片複製過來，我們可能還記得在我們早期的說明中，確定了這種特殊關係； X 平方加 Y 平方等於這個特定的複雜表達式。 \n So I can substitute that in and do some simplification and I end up with this slightly less complex expression for Q1. \n 因此，我可以將其替換並進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式。 \n And it is the same expression that I got following the geometric approach in the previous section. \n 這與我在上一節中遵循幾何方法求出的表達式一模一樣。 \n \n \n \n", 'tags': '', 'url': 'W15.html'}, {'title': 'W16', 'text': 'MTB_robot 的取放方塊流程規劃 (Process Planning): \n 1. Onshape 零組件繪製: \n \n 繪製影片: \n \n 利用onshape建立各部份零組件 \n Link1 \n \n Link2 \n \n Link3 \n \n Base \n \n \n MTB.dwg \n MTB.stl \n 2. 建立 CoppeliaSim 4.1.0 MTB robot 場景 \n 檔案: \n MTB-2.ttt \n MTB-2.lua \n 操作與講解 \n \n 下方為lua程式: \n function move(j1,j2,j3,j4)\n    modelBase=sim.getObjectAssociatedWithScript(sim.handle_self)\n    modelName=sim.getObjectName(modelBase)\n    jointHandle={}\n    j={j1*math.pi/180,j2*math.pi/180,j3*math.pi/180,j4*math.pi/180}\n    for i=1,4,1 do\n        jointHandle[i]=sim.getObjectHandle(\'MTB_axis\'..i)\n        sim.wait(1)\n    end\n    for i=1,4,1 do\n        sim.setJointPosition(jointHandle[i],j[i])\n        sim.wait(1)\n    end\n    \nend\n\nfunction sysCall_threadmain()\n    move(0,0,0,0)\n    move(30,30,0,0)\n    move(60,60,0.5,0)\n    move(0,0,0,30)\n    move(30,0,0,0)\n    move(0,0,0,0)\n    \n    \nend \n 3. 手臂末端加入 components-gripper-suction pad 吸盤 \n 檔案: \n W16_keyboard.ttt \n mtb_w16b.lua  \n mtb_w16s.lua \n 操作與講解 \n \n 下方為主程式: \n function sysCall_init() \n    axis1=sim.getObjectHandle(\'MTB_axis1\')\n    axis2=sim.getObjectHandle(\'MTB_axis2\')\n    axis3=sim.getObjectHandle(\'MTB_axis3\')\n    axis4=sim.getObjectHandle(\'MTB_axis4\')\n    mtb3=sim.getObjectHandle(\'MTB_link3\')\n    suctionPad=sim.getObjectHandle(\'suctionPad\')\n    BaseFrame=sim.getObjectHandle("BaseFrame")\n    block =sim.getObjectHandle("block")\n    deg1 = 0\n    deg2 = 0\n    distance3 = 0\n    modelBase=sim.getObjectHandle(sim.handle_self)\n    robotBase=modelBase\n    robotName=\'suctionPad\'\n    deg = math.pi/180\n    \nend\nfunction sysCall_actuation() \n    calibration = 0.0042\n    message, auxiliaryData=sim.getSimulatorMessage()\n        while message ~= -1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage(\'????? key:\'..key)\n            if (message==sim.message_keypress) then\n            if (auxiliaryData[1]==112) then --p activate the suction pad\n                sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),"active",\'true\')\n                end -- if p\n                if (auxiliaryData[1]==113) then --q deactivate the suction pad\n                sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                end -- if q\n                if (auxiliaryData[1]==108) then --l \n                     deg1 = deg1+0.4*deg\n                     sim.setJointPosition(axis1, deg1)\n                end -- if l\n                if (auxiliaryData[1]==114) then --r \n                     deg1 =deg1-0.4*deg\n                     sim.setJointPosition(axis1, deg1)\n                end -- if r\n                 if (auxiliaryData[1]==103) then --g\n                     deg2 =deg2-0.4*deg\n                     sim.setJointPosition(axis2, deg2)\n                end -- if r\n                 if (auxiliaryData[1]==104) then --h \n                     deg2 =deg2+0.4*deg\n                     sim.setJointPosition(axis2, deg2)\n                end -- if r\n                if (auxiliaryData[1]==100) then --d \n                     distance3 = distance3 + 0.03 + calibration\n                     sim.setJointPosition(axis3, distance3)\n                end -- if d\n                if (auxiliaryData[1]==117) then --u\n                     distance3 = distance3 - 0.03 - calibration\n                     sim.setJointPosition(axis3, distance3)\n                end -- if u\n                if (auxiliaryData[1]==98) then --b\n                     deg1 =0\n                     deg2 =0\n                     sim.setJointPosition(axis1, deg1)\n                     sim.setJointPosition(axis2, deg2)\n                end -- if b\n           end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n        end -- while\nend -- function\n \n 下方為吸盤程式: \n function sysCall_init() \n    s=sim.getObjectHandle(\'suctionPadSensor\')\n    l=sim.getObjectHandle(\'suctionPadLoopClosureDummy1\')\n    l2=sim.getObjectHandle(\'suctionPadLoopClosureDummy2\')\n    b=sim.getObjectHandle(\'suctionPad\')\n    suctionPadLink=sim.getObjectHandle(\'suctionPadLink\')\n\n    infiniteStrength=sim.getScriptSimulationParameter(sim.handle_self,\'infiniteStrength\')\n    maxPullForce=sim.getScriptSimulationParameter(sim.handle_self,\'maxPullForce\')\n    maxShearForce=sim.getScriptSimulationParameter(sim.handle_self,\'maxShearForce\')\n    maxPeelTorque=sim.getScriptSimulationParameter(sim.handle_self,\'maxPeelTorque\')\n\n    sim.setLinkDummy(l,-1)\n    sim.setObjectParent(l,b,true)\n    m=sim.getObjectMatrix(l2,-1)\n    sim.setObjectMatrix(l,-1,m)\nend\n\nfunction sysCall_cleanup() \n--[[\n    sim.setLinkDummy(l,-1)\n    sim.setObjectParent(l,b,true)\n    m=sim.getObjectMatrix(l2,-1)\n    sim.setObjectMatrix(l,-1,m)\n]]--\nend \n\nfunction sysCall_sensing() \n    parent=sim.getObjectParent(l)\n    if (sim.getScriptSimulationParameter(sim.handle_self,\'active\')==false) then\n        if (parent~=b) then\n            sim.setLinkDummy(l,-1)\n            sim.setObjectParent(l,b,true)\n            m=sim.getObjectMatrix(l2,-1)\n            sim.setObjectMatrix(l,-1,m)\n        end\n    else\n        if (parent==b) then\n            -- Here we want to detect a respondable shape, and then connect to it with a force sensor (via a loop closure dummy dummy link)\n            -- However most respondable shapes are set to "non-detectable", so "sim.readProximitySensor" or similar will not work.\n            -- But "sim.checkProximitySensor" or similar will work (they don\'t check the "detectable" flags), but we have to go through all shape objects!\n            index=0\n            while true do\n                shape=sim.getObjects(index,sim.object_shape_type)\n                if (shape==-1) then\n                    break\n                end\n                if (shape~=b) and (sim.getObjectInt32Parameter(shape,sim.shapeintparam_respondable)~=0) and (sim.checkProximitySensor(s,shape)==1) then\n                    -- Ok, we found a respondable shape that was detected\n                    -- We connect to that shape:\n                    -- Make sure the two dummies are initially coincident:\n                    sim.setObjectParent(l,b,true)\n                    m=sim.getObjectMatrix(l2,-1)\n                    sim.setObjectMatrix(l,-1,m)\n                    -- Do the connection:\n                    sim.setObjectParent(l,shape,true)\n                    sim.setLinkDummy(l,l2)\n                    break\n                end\n                index=index+1\n            end\n        else\n            -- Here we have an object attached\n            if (infiniteStrength==false) then\n                -- We might have to conditionally beak it apart!\n                result,force,torque=sim.readForceSensor(suctionPadLink) -- Here we read the median value out of 5 values (check the force sensor prop. dialog)\n                if (result>0) then\n                    breakIt=false\n                    if (force[3]>maxPullForce) then breakIt=true end\n                    sf=math.sqrt(force[1]*force[1]+force[2]*force[2])\n                    if (sf>maxShearForce) then breakIt=true end\n                    if (torque[1]>maxPeelTorque) then breakIt=true end\n                    if (torque[2]>maxPeelTorque) then breakIt=true end\n                    if (breakIt) then\n                        -- We break the link:\n                        sim.setLinkDummy(l,-1)\n                        sim.setObjectParent(l,b,true)\n                        m=sim.getObjectMatrix(l2,-1)\n                        sim.setObjectMatrix(l,-1,m)\n                    end\n                end\n            end\n        end\n    end\n    if (sim.getSimulationState()==sim.simulation_advancing_lastbeforestop) then\n        sim.setLinkDummy(l,-1)\n        sim.setObjectParent(l,b,true)\n        m=sim.getObjectMatrix(l2,-1)\n        sim.setObjectMatrix(l,-1,m)\n    end\nend  \n 4. 逆向運動學函式 \n 根據 W15 線上課程內容之 Inverse Kinematics 方程式 ( 影片1 \xa0 或 影片2 )，- (0.2, 0.7, 0.05) 與 (-0.3, -0.55, 0.05)，使用以上條件計算出角度 \n (0.2, 0.7, 0.05) \n \n (-0.3, -0.55, 0.05) \n \n 5. Python remote API 逆向運動學函式', 'tags': '', 'url': 'W16.html'}, {'title': 'phone webcam', 'text': '為因應校方公告: \n 「嚴重特殊傳染性肺炎」疫情課程彈性處理事項_遠距教學公告_0515D(中英版本).pdf \n 5月17日至5月30日全校所有課程改採遠距教學。 \n 需要使用到麥克風、網路攝影機、顯示器、電腦、音響、直播軟體、串流平台，如果無網路攝影機可以使用手機當作視訊鏡頭同時也可以使用手機收音。 \n 後續將介紹如何使用手機鏡頭變成網路攝影機並附帶麥克風功能。 \n \n', 'tags': '', 'url': 'phone webcam.html'}, {'title': 'ios for Webcam', 'text': '［iVCam的幾大特點］ \n \n 低延遲！高速度！高質量的即時視頻 \n 前後向鏡頭畫面都支援，並且可以即時切換 \n 只需要Wi-Fi或是USB連接手機，簡單應用無阻礙 \n 音頻也能接收，將手機變為PC的無線麥克風使用 \n 其他數不清的遠端執行優點 \n \n STEP1-在PC/手機上下載iVcam: \n 使用PC並Google搜尋iVcam，並點擊官網連結 至官網 會出現下方圖片，點擊紅框處下載。 \n \n 下載完成之資料夾: \n 下載安裝完成後必須重啟起計算機(windows)，這是 軟件完成計算機上driVer設置的必需步驟  。如果不重新啟動，將無法連接。 \n \n 使用機型: iphone XR \n 軟體版本: iOS 14.0.1 \n iVcam與iphone兼容上述型號以下版本 \n 接下來開啟手機點擊APP Store下方紅框處: \n \n 搜尋iVcam，點擊下載並開啟: \n \n STEP2－將電腦與手機連結到同一個Wi-Fi \n 必須連結到同個IP才能成功使用手機鏡頭成為webcam鏡頭。 \n 下圖為未連結狀態(iphone): \n \n 下圖為未連結狀態(PC windows): \n \n [iVcam]成功連結畫面: \n \n \n 只要手機跟電腦有順利連接到Wi-Fi或USB的話，兩邊就會自動配對成功！螢幕上的三個功能分別是「拍照」、「擷取螢幕畫面」和「錄影」。 \n STEP3－測試電腦與手機的鏡頭/麥克風 \n 順利連接後，可透過「 Test Webcam and Microphone Online 」，這個網站可供測試電腦攝影機&麥克風，確認鏡頭跟麥克風是否有畫面及成功收音！ \n STEP4-Bonus－調整視訊的設定（尺寸、畫質、音質 etc.） \n \n ↑ 調整iVCam：直向、橫向、尺寸、畫質、音質 etc. \n \n ↑ 調整iVCam：特效、鏡像畫面、前置後置鏡頭 etc. \n 這幾個選項，隨時可以依照自己的喜好，或是連線的穩定性，來做調整！ \n STEP5-使用OBS擷取手機鏡頭Webcam Setting \n 開啟OBS點擊擷取顯示器: \n \n 出現視訊擷取對話框: \n \n 接下來會出現"屬性[視訊擷取裝置]"，將裝置選項選成:e2eSoft iVCam，點擊確定。 \n \n STEP6-成功使用OBS擷取手機鏡頭Webcam \n \n', 'tags': '', 'url': 'ios for Webcam.html'}, {'title': 'Android for Webcam', 'text': 'step1.首先使用手機進入google play商店，下載下圖程式。 \n \n step2.使用電腦點擊下方網址下載程式。 \n https://www.dev47apps.com/droidcam/windows/ \xa0 \n \n step3.電腦安裝後開啟程式，滑鼠點擊USB圖示 \n \n step4.手機同時打開下載好的Droidcam，畫面如下: \n \n step5.手機使用USB數據線連接電腦按下電腦軟體視窗中的START，如下圖: \n \n step6.在OBS中使用手機鏡頭取代webcam，進行測試。 \n', 'tags': '', 'url': 'Android for Webcam.html'}, {'title': 'Github sever issue', 'text': '2021/5/16在推送改版時發生github page無法建構頁面問題， 在github pages設定中有出現警告your site is having problems building :unable to build page. \n 使用git reset HEAD^退回版本也不無法進行改版，如果持續改版會收到下方郵件: https://docs.github.com/articles/troubleshooting-jekyll-builds \n \n 倉儲改版會出現無法轉檔的情形 \n \n 本想使用git log --oneline來排查commit ID並用git reset HEAD^退回版本來解決，經過多次退回版本無效 \n \n \n \n 最後於Gitter發問也有學員發生同樣問題，最後由老師在github官網發現是github sever的問題 \n 於2021/5/16 P.M. 10:00-11:00 Github sever 恢復正常由老師測試可否正常轉換 \n \n \n \n 論壇處也有許多Github用戶發生同樣問題!', 'tags': '', 'url': 'Github sever issue.html'}]};