<h1>Introduction</h1>
<p><marquee behavior="alternate" direction="right" height="30" scrollamount="5">NFU-MDE-40823108-KAO,YU-CHE</marquee></p>
<p><em><strong><span>⚡</span><span>⚡MDE-CD2021⚡⚡</span></strong></em></p>
<p><em><span>Query Github host status: <a href="https://www.githubstatus.com/">https://www.githubstatus.com/</a></span></em></p>
<p><em><span>cd2021 course repository: <a href="https://github.com/mdecourse/cd2021">https://github.com/mdecourse/cd2021</a></span></em></p>
<p><em><span>cd2021 course discussion: <a href="https://github.com/mdecourse/cd2021/discussions">https://github.com/mdecourse/cd2021/discussions</a></span></em></p>
<p><em><span>cd2021 gitter: <a href="https://gitter.im/mdecourse/cd2021">https://gitter.im/mdecourse/cd2021</a></span></em></p>
<p><em><span>Other KMOLab courses: <a href="http://mde.tw/">http://mde.tw/</a></span></em></p>
<p><em><strong>20201/2/25--&gt; Page creation</strong></em></p>
<p><em><strong><span>⚡</span></strong></em></p>
<p><em>  This is my Github: <strong><a href="https://github.com/40823108">NFU-MDE-40823108-KAO,YU-CHE</a></strong></em></p>
<p>    Collaborative product design internship for cd2021</p>
<p><i><em><em><em><strong>      </strong>Warehouse:</em></em></em></i><em><strong>  </strong><strong><a href="https://github.com/40823108/cd2021">cd 2021 Warehouse</a></strong></em></p>
<p><i><em><em><em>      Website:</em></em></em></i><em><strong>  <a href="https://40823108.github.io/cd2021/content/index.html">cd 2021 Website</a></strong></em></p>
<p><i><em><em><em>      <span>Group warehouse</span><i>:  --</i></em></em></em></i></p>
<p><i><em><em><em>      Group website: --</em></em></em></i></p>
<hr noshade="noshade" size="5" width="2000"/>
<p><span>⚡</span></p>
<p><span>  This is a personal website: <span> </span><em><strong>Godfather-Adolphe50-2021</strong></em></span></p>
<p>    <i>Warehouse: </i><em><strong><a href="https://github.com/40823108/Godfather-Adolphe-2021">Godfather-Adolphe50-2021 Warehouse</a></strong></em></p>
<p><em><strong>    </strong>Website:<strong> <a href="https://40823108.github.io/Godfather-Adolphe-2021/content/index.html"><em><strong></strong><strong>Godfather-Adolphe50-2021 Website</strong></em></a></strong></em></p>
<p><b><i>    </i></b><i>Youtube:</i><b><i> <strong><a href="https://www.youtube.com/channel/UCd3WMYoS7LQ5-Yh1u7gXbpA/featured">Godfather Adolphe 50</a></strong></i></b></p>
<p>⚡</p>
<p><em>  An introduction to computer programs for the first course: <span> </span><strong>cp2019</strong></em></p>
<p><i>    Warehouse: </i><em><strong><a href="https://github.com/40823108/cp2019">cp 2019 Warehouse</a> </strong></em></p>
<p><em>    Website: </em><a href="https://40823108.github.io/cp2019/content/index.html"><em><strong>c</strong><strong>p 2019 Website</strong></em></a></p>
<p><b><i>   <span> </span></i></b><i><span>Group warehouse</span></i><i>: </i><a href="https://github.com/40823108/cp2019ag5"><em><strong>cp 2019ag5 Warehouse</strong></em></a></p>
<p><b><i>    </i></b><i>Group website: </i><em><strong><a href="https://40823102.github.io/cp2019ag5/content/index.html">cp 2019ag5 website</a></strong></em></p>
<p><em><strong><span>⚡</span></strong></em></p>
<p><em>  Internet content management for the following courses: <span> </span><strong>wcm2020</strong></em></p>
<p><i>    Warehouse: <em><strong><a href="https://github.com/40823108/wcm2020">wcm 2020 Warehouse</a></strong></em></i></p>
<p><i><em><strong>    </strong>Website: <strong><a href="https://40823108.github.io/wcm2020/content/index.html"><em>wcm 2020 Website</em></a></strong></em></i></p>
<p><i><em><strong><em><span>⚡</span></em></strong></em></i></p>
<p><i><em><em>  The second course computer-aided design practice: <span> </span><strong>cad2020</strong></em></em></i></p>
<p><i>    Warehouse: <em><strong><a href="https://github.com/40823108/cad2020">cad 2020 Warehouse</a></strong></em></i></p>
<p><i><em><strong>    </strong>Website: <strong><a href="https://40823108.github.io/cad2020/content/index.html">cad 2020 Website</a></strong></em></i></p>
<p><i><em><strong>    </strong>Group warehouse<i>:</i><strong><i> </i><a href="https://github.com/a40823112/cad2020ag4"><em><strong>cad 2020ag4 Warehouse</strong></em></a></strong></em></i></p>
<p><i><em><strong><em><strong>    </strong></em></strong><em>Group website:</em><strong><em><strong> <em><strong><a href="https://a40823112.github.io/cad2020ag4/content/index.html">cad 2020ag4 website</a></strong></em></strong></em></strong></em></i></p>
<p><i><em><strong><em><strong><em><strong><span>⚡</span></strong></em></strong></em></strong></em></i></p>
<p><i><em><em><em>  The second course collaborative product design practice: <span> </span><strong>cd2021</strong></em></em></em></i></p>
<p><i><em><em><em><strong>    </strong>Warehouse:<strong>  </strong><strong><a href="https://github.com/40823108/cd2021">cd 2021 Warehouse</a></strong></em></em></em></i></p>
<p><i><em><em><em>    Website:<strong> <span> </span><a href="https://40823108.github.io/cd2021/content/index.html">cd 2021 Website</a></strong></em></em></em></i></p>
<p><i><em><em><em>    <span>Group warehouse</span><i>:  --</i></em></em></em></i></p>
<p><i><em><em><em>    Group website: --</em></em></em></i></p>
<p></p>
<h1>KMOLab basis</h1>
<p><strong>About:</strong></p>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules<span> </span><a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<p><em></em><strong><br/></strong></p>
<h2>Cmsimde create</h2>
<p><strong>Step1:</strong></p>
<p><span>  <em>Go to</em></span><em><strong> </strong><a href="https://github.com/mdecourse/cd2021/discussions/7"><strong>2021 可攜程式系統</strong><br/></a>First download the <strong><a href="https://drive.google.com/file/d/1R6vAAWdNDigmyvFFQTKyM-XNKOWeCFJU/view?usp=sharing" rel="nofollow">下載 kmol2021_spring_v2.7z</a></strong> compressed file, and extract the file to the    flash drive.</em></p>
<p><strong>Step2:</strong></p>
<p><strong>  </strong><i>Set gitconfig and save this file in the home directory.<br/>First go to home and select the .config file.<br/></i></p>
<p><i><img alt="" height="650" src="/images/cmsimde-1.JPG" width="1175"/></i></p>
<p><i><img alt="" height="653" src="/images/cmsimde-2.JPG" width="1179"/></i></p>
<p><strong>Step3:</strong></p>
<p><em>  Drag the<strong> .config file</strong> to <i><span><strong>(Untitled)-SciTE,</strong>modify the name and mailbox to your student ID.</span></i></em></p>
<p><em><i><span><strong><img alt="" height="733" src="/images/cmsimde-3.JPG" width="563"/></strong></span></i></em></p>
<p><strong>Step4:</strong></p>
<p><em>  Go to </em><strong><a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a>,</strong><em>And click on the red box below.</em></p>
<p><strong><img alt="" height="1080" src="/images/cmsimde-4.JPG" width="1920"/></strong></p>
<p><strong>Step5:</strong></p>
<p><em>  Establish cd2021 warehouse.</em></p>
<p><em><img alt="" height="1080" src="/images/cmsimde-5.JPG" width="1920"/></em></p>
<p><strong>Step6:</strong></p>
<p><em>  After completing the cd 2021 storage, click the settings below.</em></p>
<p><em><img alt="" height="1080" src="/images/cmsimde-6.JPG" width="1920"/></em></p>
<p><strong>Step7:</strong></p>
<p><em>  Slide to the GitHub Pages below to create GitHub Pages.</em></p>
<p><em><img alt="" height="1080" src="/images/cmsimde-7.JPG" width="1920"/></em></p>
<p><strong>Step8:</strong></p>
<p><em>  Open cmd, and enter cd tmp<br/>Re-enter: git clone --recurse-submodules <a href="https://github.com/40823108/cd2021.git">https://github.com/40823108/cd2021.git</a><br/></em></p>
<p><em><img alt="" height="516" src="/images/cmsimde-8.JPG" width="985"/></em></p>
<p><strong>Step9:</strong></p>
<p><em>  Test whether the website is established.</em></p>
<p><strong>Y:\tmp\cd2021\cmsimde&gt;python wsgi.py</strong></p>
<p><strong><img alt="" height="513" src="/images/cmsimde-9.JPG" width="980"/></strong></p>
<p><strong>Step10:</strong></p>
<p><em>  Open the browser and enter https://localhost:9443, click Advanced.</em></p>
<p><em><img alt="" height="1079" src="/images/cmsimde-10.JPG" width="1914"/></em></p>
<p><strong>Step11:</strong></p>
<p><em>  Click to continue.</em></p>
<p><em><img alt="" height="1080" src="/images/cmsimde-11.JPG" width="1920"/></em></p>
<p><strong>Step12:</strong></p>
<p><em>  Click login.</em></p>
<p><em><img alt="" height="1080" src="/images/cmsimde-12.JPG" width="1920"/></em></p>
<p><strong>Step13:</strong></p>
<p><em>  enter password.</em></p>
<p><em><img alt="" height="1075" src="/images/cmsimde-13.JPG" width="1910"/></em></p>
<p><strong>Step14:</strong></p>
<p><em>  Can start editing the website.</em></p>
<p><em><img alt="" height="1080" src="/images/cmsimde-14.JPG" width="1920"/></em></p>
<p>Step15:</p>
<p><em>  Upload the file to github.</em></p>
<p><em><strong>Y:\tmp\cd2021&gt;git add .</strong></em></p>
<p><em><strong><img alt="" height="513" src="/images/cmsimde-15.JPG" width="982"/></strong></em></p>
<p><strong>Step16:</strong></p>
<p><em>  <strong>Y:\tmp\cd2021&gt;git commit -m "add"</strong></em></p>
<p><em><strong><img alt="" height="511" src="/images/cmsimde-16.JPG" width="978"/></strong></em></p>
<p><strong>Step17:</strong></p>
<p><em>    <strong>Y:\tmp\cd2021&gt;git push</strong></em></p>
<p><em><strong><img alt="" height="513" src="/images/cmsimde-17.JPG" width="977"/></strong></em></p>
<p><strong>Step18:</strong></p>
<p><em>  Successfully established a website.</em></p>
<p><em><img alt="" height="1080" src="/images/cmsimde-18.JPG" width="1920"/></em></p>
<p><em> </em></p>
<h2>Python program</h2>
<p><strong>Python program:</strong></p>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">import csv
   
# read student list
filename = 'D:/1a/1alist.txt'
with open(filename, encoding="utf-8") as f:
    content = f.readlines()
    student = [x.strip() for x in content]
#print(content)
#print(student)
   
# Timestamp, email, ????, url, score, desp, memo
# 0, 1, 2, 3, 4, 5, 6
#total = 0
  
all = {}
with open('D:/1a/1a.csv', encoding="utf-8") as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
       
    line_count = 0
    for row in csv_reader:
        if line_count == 0:
            #print(f'Column names are {", ".join(row)}')
            line_count += 1
        else:
            student_num = row[1].split("@")[0]
            #print(student_num)
            student_score = row[4]
            #print(student_score)
            try:
                all.update({student_num: student_score})
            except:
                all.update({student_num: "error"})
            #print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
            #print(f'\t{row[4]}')
            #total += int(row[4])
            line_count += 1
#print(all)
#print(student)
  
for i in student:
       
    #if i in all:
        #pass
    #else:
        #print(str(i))
       
    try:
        print(i + "\t" + all[i])
    except:
        print(i + "\t60")
  
   
    #print(f'Processed {line_count} lines.')
    #print("??=" + str(total/line_count))</pre>
<p><strong>Flask program:</strong></p>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
   
app = Flask(__name__)
   
@app.route('/') 
def hello_world():
    return 'Hello, From Flask!'
   
if __name__== '__main__': 
    app.run()
</pre>
<h2>SSH key produce</h2>
<p>Open:</p>
<p>  Y:/PuTTY--&gt;puttygen.exe</p>
<p><img alt="" height="701" src="/images/ssh-1.PNG" width="1272"/></p>
<p><em>  Use puttygen to import the private key (id_rsa) and convert it into a format (.ppk) file that putty can understand.</em></p>
<p><em>  After saving the (.ppk) file.</em></p>
<p><em><img alt="" height="471" src="/images/ssh-2.PNG" width="481"/></em></p>
<p><em>  Use scite to open the public key (id_rsa.pub), go to the toolbar and find Options--&gt;Wrap to see the complete file content.</em></p>
<p><em><img alt="" height="929" src="/images/ssh-3.PNG" width="610"/></em></p>
<p><em><span>  The full content is as follows:</span></em></p>
<p><em><span><img alt="" height="734" src="/images/ssh-4.PNG" width="564"/></span></em></p>
<p><em><span>  Go to storage--&gt;seeting--&gt;SSH and GPG keys, click New SSH key, paste the copied content and save it for use.</span></em></p>
<p><em><span><img alt="" height="1440" src="/images/ssh-5.PNG" width="2560"/></span></em></p>
<h2>SSH putty settings</h2>
<p><em>  SSH Putty settings:</em></p>
<p><em><img alt="" height="443" src="/images/ssh-6.PNG" width="452"/></em></p>
<p><em>  Please select the .ppk file for the line drawing.</em></p>
<p><em><img alt="" height="444" src="/images/ssh-7.PNG" width="454"/></em></p>
<p><em>  Go back to the Session directory and press save to save.</em></p>
<p><em><img alt="" height="442" src="/images/ssh-8.PNG" width="453"/></em></p>
<p><em>  Enter the folder you want to Push, then enter the \tmp\cd2021\.git directory, modify the config file, and modify the string <strong>url=https:\\github.com:40823108/cd2021.git</strong></em></p>
<p><em>  Modified to: <strong>url=git@github.com:40823108/cd2021.git</strong></em></p>
<p><em><strong><img alt="" height="734" src="/images/ssh-9.PNG" width="565"/></strong></em></p>
<p><em>  The following is a record of successful use of SSH without password push.</em></p>
<p><em><img alt="" height="515" src="/images/ssh-10.PNG" width="984"/></em></p>
<p><em></em></p>
<h2>Leo Edit Blog</h2>
<p><strong>Step1:</strong></p>
<p><em>  Open leo </em>➜ Y:/tmp&gt;leo</p>
<p><img alt="" height="513" src="/images/leo-1.JPG" width="982"/></p>
<p><strong>Step2:</strong></p>
<p><em>  After opening leo, search Disqus in the browser and add a forum.</em></p>
<p><em><img alt="" height="1439" src="/images/leo-2.JPG" width="2560"/></em></p>
<p><strong>Step3:</strong></p>
<p><em>  Click File <span>➜ Open-Outline</span></em><strong><br/></strong></p>
<p><em><span><img alt="" height="960" src="/images/leo-8.jpg" width="1706"/></span></em></p>
<p><strong>Step4:</strong></p>
<p><em>  Y:\tmp\cd2021\config&gt;pelican.leo</em></p>
<p><em><img alt="" height="712" src="/images/leo-9.JPG" width="1186"/></em></p>
<p><em><img alt="" height="715" src="/images/leo-10.JPG" width="1188"/></em></p>
<p><em><img alt="" height="712" src="/images/leo-13.JPG" width="1188"/></em></p>
<p><strong>Step5:</strong></p>
<p><em>  Modify the data in the share.</em></p>
<p><em><img alt="" height="1440" src="/images/leo-3.JPG" width="2560"/></em></p>
<p><strong>Step6:</strong></p>
<p><em>  Modify the data in the remote.</em></p>
<p><em><img alt="" height="1440" src="/images/leo-4.JPG" width="2560"/></em></p>
<p><strong>Step7:</strong></p>
<p><em>  Edit template <span>➜ </span>@edit base.html</em></p>
<p><em><img alt="" height="1440" src="/images/leo-5.JPG" width="2560"/></em></p>
<p><strong>Step8:</strong></p>
<p><em>  Modify markdown.</em></p>
<p><em><img alt="" height="1440" src="/images/leo-6.JPG" width="2560"/></em></p>
<p><em><img alt="" height="1440" src="/images/leo-7.JPG" width="2560"/></em></p>
<h2>Leo Edit Reveal</h2>
<p><strong>Step1:</strong></p>
<p><em>  Open leo </em>➜ Y:/tmp&gt;leo</p>
<p><img alt="" height="513" src="/images/leo-1.JPG" width="982"/></p>
<p><strong>Step2:</strong></p>
<p><em>  Click File <span>➜ Open-Outline</span></em></p>
<p><em><span><img alt="" height="960" src="/images/leo-8.jpg" width="1706"/></span></em></p>
<p><strong>Step3:</strong></p>
<p><em>  Y:\tmp\cd2021\config&gt;reveal.leo</em></p>
<p><em><img alt="" height="712" src="/images/leo-9.JPG" width="1186"/></em></p>
<p><em><img alt="" height="715" src="/images/leo-10.JPG" width="1188"/></em></p>
<p><em><img alt="" height="717" src="/images/leo-11.JPG" width="1185"/></em></p>
<p><strong>Step4:</strong></p>
<p><strong>  </strong><em>You can start editing Reveal.</em></p>
<p><em><img alt="" height="1440" src="/images/leo-12.JPG" width="2560"/></em></p>
<h2>Synergy</h2>
<p><span>協同設計與版次管理能夠有效提升團隊工作效率，降低內容互相覆蓋，最終造成無法辨識是誰更改內容的情況。</span></p>
<p>因協作者的工作與內容更動皆在獨立分支清清楚楚，責任歸屬的也就一目了然。</p>
<p>分支出來的設計，在本次目標不需要，或許未來的項目可以用上。可以避免掉「當初做過，但改掉了，這次又要重做」這種事情發生。</p>
<p><img alt="" height="673" src="/images/Synergy-1.jpg" width="924"/></p>
<p>組長在倉儲Setting-&gt;Manage access-&gt;Invite a collaborato邀請協作者</p>
<p>組員在自己倉儲中Setting-&gt;Manage access-&gt;Invite a collaborato組長(組員不用互邀)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">git clone --recurse-submodules https://github.com/a40823112/stage2-ag1.git stage2-ag1 (clone組長倉儲)
cd stage2-ag1
git pull
git remote add 40823108 https://github.com/40823108/stage2-ag1.git (add自己倉儲)
git commit -m "test"
git push 40823108 (先推送至自己倉儲)
//如果沒問題再推送至組倉儲
git push (推送至分組倉儲: https://github.com/a40823112/stage2-ag1.git)

//***更改協同分組網站之前一定都要先git pull，如果直接更改會造成資料錯亂***</pre>
<p><em>Step1:</em></p>
<p>先建立一個空倉儲</p>
<p><img alt="" height="960" src="/images/Synergy-2.jpg" width="1706"/></p>
<p><em>Step2:</em></p>
<p><i>git clone --recurse-submodules <a href="https://github.com/a40823112/stage2-ag1.git">https://github.com/a40823112/stage2-ag1.git</a></i></p>
<p><i><img alt="" height="513" src="/images/Synergy-3.jpg" width="983"/></i></p>
<p><em>Step3:</em></p>
<p>點選倉儲中的Settings</p>
<p><img alt="" height="960" src="/images/Synergy-4.jpg" width="1706"/></p>
<p><em>Step4:</em></p>
<p>點選左方列表中的Manage access</p>
<p><img alt="" height="960" src="/images/Synergy-5.jpg" width="1706"/></p>
<p><em>Step5:</em></p>
<p>點選 Invite a collaboratot後邀請組長。</p>
<p><img alt="" height="960" src="/images/Synergy-6.jpg" width="1706"/></p>
<p><em>Step6:</em></p>
<p>創建Git Hub Page</p>
<p><img alt="" height="960" src="/images/Synergy-7.jpg" width="1706"/></p>
<p><em>Step7:</em></p>
<p>cd  stage2-ag1</p>
<p>git pull</p>
<p>git remote add 40823108 <a href="https://github.com/40823108/stage2-ag1.git">https://github.com/40823108/stage2-ag1.git</a> (add自己倉儲)</p>
<p>git commit -m "test"</p>
<p>git push 40823108 (先推送至自己倉儲)</p>
<p>如果沒問題再推送至分組倉儲</p>
<p>git push (推送至分組倉儲: https://github.com/a40823112/stage2-ag1.git)</p>
<p>***更改協同分組網站之前一定都要先git pull，如果直接更改會造成資料錯亂*</p>
<p></p>
<h1>Coppeliasim basic</h1>
<p><span>Coppeliasim裡有很多機械手臂、輪子之類的零件，可以提供我們搭建自己需要仿真的物體。</span><span>可以用lua函數或界面操作joint關節（即電機）運動，我們可以做正逆運動，軌跡規劃。</span><span>同時，它方便我們在其他地方調用api，支持跨平台運行，例如matlab、visual等，所以很適合用來驗證算法邏輯有沒有問題。</span></p>
<p><img alt="" height="585" src="/images/coppeliasim-1.gif" width="1080"/></p>
<p></p>
<h2>Import objects</h2>
<p><em><strong>Step1:</strong></em></p>
<p><span>  利用3D繪圖軟體(Autodesk Inventor Professional 2021),繪製所需物件。</span></p>
<p><span><img alt="" height="960" src="/images/coppeliasim-2.jpg" width="1706"/></span></p>
<p><em><strong>Step2:</strong></em></p>
<p><span>  並將其匯出成STL檔案,<span>可先將座標位置定好再做匯出(Z軸向上為佳)<br/>以Inventor為例匯出STL檔案時須以另存成副本的方式,才能成功匯出STL檔案<br/>步驟為:開啟Inventor--&gt;開啟零件檔或組合檔--&gt;檔案--&gt;另存--&gt;將副本儲存成...</span></span></p>
<p><span><img alt="" height="960" src="/images/coppeliasim-3.jpg" width="1706"/></span></p>
<p><span>將所需之STL檔案儲存至專案資料夾中。</span></p>
<p><span><img alt="" height="960" src="/images/coppeliasim-4.jpg" width="1706"/></span></p>
<p><em><strong>Step3:</strong></em></p>
<p><span>  開啟coppeliasim匯入物件,步驟為: File--&gt;import--&gt;Mesh...</span></p>
<p><span><img alt="" height="960" src="/images/coppeliasim-5.jpg" width="1706"/></span></p>
<p><span>匯入物件設定視窗。</span></p>
<p><span><img alt="" height="960" src="/images/coppeliasim-6.jpg" width="1706"/></span></p>
<p><span>下圖為匯入選項之翻譯。</span></p>
<p><span><img alt="" height="447" src="/images/coppeliasim-7.jpg" width="758"/></span></p>
<p><em><strong>Step4:</strong></em></p>
<p><span>  匯入方法與設定操作。</span></p>
<p><span><img alt="" height="1400" src="/images/coppeliasim-8.gif" width="2560"/></span></p>
<p><span></span></p>
<h2>Divide object</h2>
<p>1.因匯入的STL檔案為單一物件,如果為組合圖所有零件匯以同一物件做匯入,必須將其作分解,使能得到所需零件數量。</p>
<p><img alt="" height="960" src="/images/coppeliasim-9.jpg" width="1706"/></p>
<p>2.分解物件步驟為: <span>Edit--&gt;Grouping/Merging--&gt;Divide selected shapes :</span></p>
<p><span><img alt="" height="960" src="/images/coppeliasim-10.jpg" width="1706"/></span></p>
<p><span>下圖為分解物件功能區翻譯:</span></p>
<p><span><img alt="" height="493" src="/images/coppeliasim-11.jpg" width="798"/></span></p>
<p><span>分解後可以得到下圖黃色區域的部分,將整個STL檔案切割出個別零件:</span></p>
<p><span><img alt="" height="960" src="/images/coppeliasim-12.jpg" width="1706"/></span></p>
<p>3.因匯入後軸向不同,為了方便之後放置joint需先將零件分解出來後再做軸向轉換<br/>下圖為軸向轉換功能展示:</p>
<p><img alt="" height="960" src="/images/coppeliasim-13.jpg" width="1706"/></p>
<p><span>下圖為轉換後與coppeliasim軸向相同示意圖:</span></p>
<p><span><img alt="" height="960" src="/images/coppeliasim-14.jpg" width="1706"/></span></p>
<p><span>4.以下為操作展示:</span></p>
<p><span><img alt="" height="1400" src="/images/coppeliasim-15.gif" width="2560"/></span></p>
<p><span></span></p>
<h2>Appearance setting</h2>
<p>1.可使用內部彈出視窗(Scene Object Properties)修改每個物件的顏色,需先選中需染色之物件在點選左方工具列中放大鏡的圖示即可使用內部彈出視窗</p>
<p>2.修改顏色步驟為:  選中之物件--&gt;<span>Scene Object Properties--&gt;shape--&gt;Adjust color--&gt;Ambient/diffuse component--&gt;RGB  or  HSL--&gt;Apply to selection</span></p>
<p><span>下圖為修改顏色視窗:</span></p>
<p><span><img alt="" height="483" src="/images/coppeliasim-16.jpg" width="887"/></span></p>
<p><span>銳化屬性對話框:</span></p>
<p><span><img alt="" height="566" src="/images/coppeliasim-17.jpg" width="805"/></span></p>
<p><span>一般屬性對話框:</span></p>
<p><span><img alt="" height="631" src="/images/coppeliasim-18.jpg" width="970"/></span></p>
<h2>Joint settings</h2>
<p>1.為了讓物件可以旋轉,所以需要加入joint.</p>
<p>2.點選左上的 Add--&gt;joint--&gt;Revolute 這樣就能叫出一個圓柱狀的軸，並生成在座標 0.0.0. 上。</p>
<p>3.加入joint步驟為:  空白處滑鼠右鍵--&gt;<span>Add--&gt;joint--&gt;Revolute.</span></p>
<p>4.可使用物件彈出視窗修改joint之長度與直徑,還有一班屬性與動態屬性。</p>
<p>5.新增完joint後,因物件與其無關聯所以須使用上方工具欄中Object/ltem Translation/Position--&gt;<span>Position(移動)指令,使物件與馬達位置相同後,再使用Object/ltem Translation/Position--&gt;<span>Position(旋轉)指令使馬達與物件軸向相同。</span></span></p>
<p><span><span>下圖為Joint屬性對話框:</span></span></p>
<p><span><img alt="" height="520" src="/images/coppeliasim-19.jpg" width="868"/></span></p>
<p><span>下圖為組裝測試圖:</span></p>
<p><span><img alt="" height="960" src="/images/EV3-12.jpg" width="1706"/></span></p>
<p><span></span></p>
<h2>Orchestration objects</h2>
<p>1.在匯入的STL檔案中,將物件做分割後每個物件之間是毫無關聯的,所以如果為轉軸或關節處匯無法轉動</p>
<p>2.在左方模型瀏覽器中,將所需之物件拖拉編排,相關連之物件需為同一數列,依裝配之順序將物件做排列,無關聯之物件無需做排列,只需依需求打開動態屬性</p>
<p>3.排列方式用下方圖片做參考:</p>
<p><img alt="" height="410" src="/images/coppeliasim-20.jpg" width="302"/></p>
<p></p>
<h2>Proximity sensor</h2>
<p>Proximity sensor 為coppeliasim中的內建感測器(接近傳感器)。</p>
<p>1.添加<span>Proximity sensor步驟為:Menu bar --&gt; Add --&gt; Proximity sensor --&gt; Cone type</span></p>
<p>2.因匯入方向不同所以要使用移動指令與旋轉指令將接近傳感器調整至所需位置。</p>
<p>3.修改<span>Proximity sensor(接近傳感器)的參數。</span></p>
<p>4.最後再將<span>Proximity sensor(接近傳感器)放置到所需之物件下編排樹狀圖即可。</span></p>
<p><span>下圖為添加畫面:</span></p>
<p><span><img caption="false" height="960" src="/images/coppeliasim-21.jpg" width="1706"/></span></p>
<p><span>下圖為修改參數屬性對話框:</span></p>
<p><span><img alt="" height="960" src="/images/coppeliasim-22.jpg" width="1706"/></span></p>
<p><span>下圖為排列樹狀圖示意圖:</span></p>
<p><span><img alt="" height="367" src="/images/coppeliasim-23.jpg" width="304"/></span></p>
<h1>Midterm</h1>
<p>以下頁籤為開學第一週(W1)~第九週(W9)之內容</p>
<h2>W1</h2>
<p>集體合作實習第一階段：</p>
<p>每周小組報告必須包括 html、pdf 和 Youtube 視頻：</p>
<p>專題：</p>
<p>  第一組成員學號：40823145</p>
<p>  第二組成員學生證：40823108</p>
<p>各組實習任務：</p>
<p>1.組長的Github賬號為每個組建立了組網站。但是，在W1中對每個班級進行排序的過程中發現，即使使用Ethercalc同步互聯網協作方式，讓每個班級的可選組員填寫二人組或二人組的學生ID，但是還是如果缺乏體力勞動或自動確定每個團隊的順序的有效計劃，我在此指導每個團隊進行自己的協同產品開發項目（W2-W4），此主題列為其中之一必選題目，每組詳細講解 第一階段被認為是最有效率的以及設置順序的方法和過程。</p>
<p>2.另外，為了讓各組在stage1的實習過程中進行協作，團隊成員可以通過博客發布自己在W2-W4過程中的工作和經驗報告，表示可以使用Leo Editor輔助Pelican在 CMSiMDE 中發布協作博客。目的是為了讓各組在協作期間能夠充分展示各階段留下的博客記錄。不過這種方法一定要熟悉Leo Editor的操作，所以通過Pelican創建協作博客，除了使用Leo Editor輔助設置和創建pelican博客之外，這個話題也被列為Stage1 協作產品設計過程中每個組的第二個必修主題。請在使用或不使用Leo Editor時為每個小組詳細說明，每個小組成員都在設置和創建協作博客過程中可能遇到或產生的問題和解決方案。</p>
<hr/>
<p>W1完成項目：</p>
<p>  使用cmstemplate創建網站，安裝Leo Editor，在CMSiMDE中設置Pelican blog，使用button命令轉換Pelican Markdown文件，將blog super文件保存到blog目錄下。</p>
<h2>W2</h2>
<p>本週開始製作於項目，與團隊成員討論了製作主題。</p>
<p>下圖是小組想做的項目，機械臂的抓手。</p>
<p><em><img alt="" height="960" src="/images/midterm-1.jpg" width="1706"/></em></p>
<p><em>我們將使用 <a href="https://cyberbotics.com/">Webots</a> 來模擬夾具的運動。</em></p>
<p><em><img alt="" height="960" src="/images/midterm-2.jpg" width="1706"/></em></p>
<h2>W3</h2>
<p>由於機械夾持器的複雜性，我們修改了題目的方向。</p>
<p>新題目是：Lego-EV3<br/> 通過積木之間的連接，形成了各種不同的機構。</p>
<p>下圖是我們理想的設計：</p>
<p><em><img alt="" height="1198" src="/images/EV3-1.JPG" width="1548"/></em></p>
<h3>work</h3>
<p><em>The picture below is our ideal design:</em></p>
<p><em><img alt="" height="1198" src="/images/EV3-1.JPG" width="1548"/></em></p>
<p>2021/3/8</p>
<p><em>Draw the body</em></p>
<p><em><img alt="" height="960" src="/images/EV3-2.jpg" width="1706"/></em></p>
<p><em>2021/3/9</em></p>
<p><em>Draw the match between the motor and the body</em></p>
<p><em><img alt="" height="960" src="/images/EV3-3.jpg" width="1706"/></em></p>
<p><i>2021/3/11</i></p>
<p><i>Draw the connecting rod and the motor-body fit</i></p>
<p><i><img alt="" height="960" src="/images/EV3-4.jpg" width="1706"/></i></p>
<p><i>2021/3/12</i></p>
<p><i>Complete picture</i></p>
<p><i><img alt="" height="960" src="/images/EV3-5.jpg" width="1706"/></i></p>
<p><i><img alt="" height="960" src="/images/EV3-6.jpg" width="1706"/></i></p>
<p><i></i></p>
<h2>W4</h2>
<p>小組簡報</p>
<p>設計工具：Autodesk Inventor Professional 2021</p>
<p>設計動機：因為上學期選修了一門課程—機電光學系統概論，我覺得這個機構很有趣。 我想通過電腦模擬做額外的設計。</p>
<p>2D工程圖：</p>
<p><em><img alt="" height="1204" src="/images/EV3-8.JPG" width="1704"/></em></p>
<p>3D 分解圖，BOM：</p>
<p><em><img alt="" height="1203" src="/images/EV3-7.JPG" width="1702"/></em></p>
<p>3D模型：</p>
<p><em><img alt="" height="960" src="/images/EV3-5.jpg" width="1706"/></em></p>
<p>模擬：</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/CO1Vg2Ma95k" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ASH91DmuYBk" width="560"></iframe></p>
<p><iframe height="580" src="https://drive.google.com/file/d/1VTZRCIs_ifjLimdZAVUOUr5o4abNILUg/preview" width="640"></iframe></p>
<p>協同設計方法和流程：使用google meet屏幕共享進行討論和設計。</p>
<p></p>
<p>設計結果：因為尺寸是定制的，比例是個大問題。 在仿真中，零件過於復雜，導致需要簡化。</p>
<p>自評：65</p>
<h2>W5</h2>
<p>第五週分組專案開始，分組以第一次分組兩兩合併為主。</p>
<p>組別為:stage2-ag1</p>
<p>組員:</p>
<p>40823108-cd2021</p>
<p>40823109<span>-cd2021</span></p>
<p>40823112<span>-cd2021</span></p>
<p>40823145<span>-cd2021</span></p>
<p>本次專案沿用stage1-ag1之專案，為了讓模型能夠按照我們的意思做動，我們嘗試編寫Lua程式並以方向鍵進行控制。</p>
<p>下方為第一次測試程式與模擬圖</p>
<p><img alt="" height="960" src="/images/EV3-12.jpg" width="1706"/></p>
<p>Lua程式:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
    -- put your actuation code here
 while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
    -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
if (auxiliaryData[1]==2007) then
                -- up key
                velocity=1000
                torque=10000
                Shape4 = 1000
                Shape7 = 1000
            end
            if (auxiliaryData[1]==2008) then
                -- down key
                velocity=1000
                torque=10000
                Shape4 = 1000
                Shape7 = 1000
            end
            if (auxiliaryData[1]==2009) then
                -- left key
                velocity=1000
                torque=10000
                Shape4 = 1000
                Shape7 = 1000
            end
            if (auxiliaryData[1]==2010) then
                -- right key
                velocity=1000
                torque=10000
                Shape4 = 1000
                Shape7 = 1000
            end
        end
        message,auxiliaryData=sim.getSimulatorMessage()
    end
    if Shape4 == 1
        then sim.setJointPosition(joint_1, 1000, orientation)
    if Shape7 == 1
        then sim.setJointPosition(joint_2, 1000, orientation)
    end
        sim.setJointTargetVelocity(joint,velocity)
    end
        joint_1=sim.getObjectHandle('joint_1')
        joint_2=sim.getObjectHandle('joint_2')
        Shape4=sim.getObjectHandle('Shape4')
        Shape7=sim.getObjectHandle('Shape7')
        velocity=0
        torque=0
        Shape4 = 0
        Shape7 = 0
end</pre>
<p>因部分語法有誤，日後待除錯。</p>
<h2>W6</h2>
<p>經過一週的時間，我們將程式進行了修改，但還是有錯誤，無法讓機構以上下左右鍵的方式進行控制。</p>
<p>下方為模擬圖:</p>
<p><img alt="" height="960" src="/images/EV3-13.jpg" width="1706"/></p>
<p>第二次Lua程式測試:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
    left_front_handle= sim.getObjectHandle('left_front')
    left_back_handle= sim.getObjectHandle('left_back')
    right_back_handle= sim.getObjectHandle('right_back')
    right_front_handle= sim.getObjectHandle('right_front')
    
    joint_1_handle= sim.getObjectHandle('joint_1')
    
    joint_2_handle= sim.getObjectHandle('joint_2')
    MaxVel=10
    leftvelocity=0
    rightvelocity=0
    dVel=0.5;
    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)
    sim.setJointTargetVelocity(left_back_handle,leftvelocity)
    sim.setJointTargetVelocity(right_back_handle,rightvelocity)
    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)
end

function sysCall_actuation()
    -- put your actuation code here
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==32) then
                -- right key
                leftvelocity=0
                rightvelocity=0
                sim.setJointForce(left_front_handle, 0)
                sim.setJointForce(left_back_handle, 0)
                sim.setJointForce(right_back_handle, 0)
                sim.setJointForce(right_front_handle, 0)
                
                
                sim.setJointForce(joint_1_handle, 1000)
                
                sim.setJointForce(joint_2_handle, 1000)
                break
            else
            --sim.setJointForce(left_front_handle, 10000)
            sim.setJointForce(left_back_handle, 10000)
            sim.setJointForce(right_back_handle, 10000)
            --sim.setJointForce(right_front_handle, 10000)
            
            sim.setJointForce(joint_1_handle, 0)
            
            sim.setJointForce(joint_2_handle, 0)
            end
            if (auxiliaryData[1]==2007) then
                -- up key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity+dVel
                rightvelocity=rightvelocity+dVel
            end
            if (auxiliaryData[1]==2008) then
                -- down key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity-dVel
                rightvelocity=rightvelocity-dVel
            end
            if (auxiliaryData[1]==2009) then
                -- left key
                leftvelocity=leftvelocity-dVel
                rightvelocity=rightvelocity+dVel
            end
            if (auxiliaryData[1]==2010) then
                -- right key
                leftvelocity=leftvelocity+dVel
                rightvelocity=rightvelocity-dVel
            end
        end
        message,auxiliaryData=sim.getSimulatorMessage()
    end
    
    if leftvelocity&gt;MaxVel then
        leftvelocity=MaxVel
    end
    if leftvelocity&lt;-MaxVel then
        leftvelocity=-MaxVel
    end
    
    if rightvelocity&gt;MaxVel then
                rightvelocity=MaxVel
    end
    if rightvelocity&lt;-MaxVel then
                rightvelocity=-MaxVel
    end
    
    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)
    sim.setJointTargetVelocity(left_back_handle,leftvelocity)
    sim.setJointTargetVelocity(right_back_handle,rightvelocity)
    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)
    
end

function sysCall_sensing()
    -- put your sensing code here
end

function sysCall_cleanup()
    -- do some clean-up here
end

-- See the user manual or the available code snippets for additional callback functions and details</pre>
<p>第二次程式失敗，日後將持續進除錯。</p>
<p></p>
<h2>W7</h2>
<p>經過前兩次的修改，最終我們成功完模擬，可以使用鍵盤的方向鍵對模型進行控制。</p>
<p>下圖為模擬圖</p>
<p><img alt="" height="1040" src="/images/EV3-14.gif" width="1920"/></p>
<p>第三次Lua程式(成功)</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    left_front_handle= sim.getObjectHandle('left_m')
    left_back_handle= sim.getObjectHandle('left_m')
    right_back_handle= sim.getObjectHandle('right_m')
    right_front_handle= sim.getObjectHandle('right_m')
    MaxVel=2
    leftvelocity=0
    rightvelocity=0
    dVel=0.5;
    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)
    sim.setJointTargetVelocity(left_back_handle,leftvelocity)
    sim.setJointTargetVelocity(right_back_handle,rightvelocity)
    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)
end

function sysCall_actuation() 
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==32) then
                -- right key
                leftvelocity=0
                rightvelocity=0
                sim.setJointForce(left_front_handle, 0)
                sim.setJointForce(left_back_handle, 0)
                sim.setJointForce(right_back_handle, 0)
                sim.setJointForce(right_front_handle, 0)
                break
            else
                --sim.setJointForce(left_front_handle, 10000)
                sim.setJointForce(left_back_handle, 10000)
                sim.setJointForce(right_back_handle, 10000)
                --sim.setJointForce(right_front_handle, 10000)
            end
            if (auxiliaryData[1]==2007) then
                -- up key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity+dVel
                rightvelocity=rightvelocity+dVel
            end
            if (auxiliaryData[1]==2008) then
                -- down key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity-dVel
                rightvelocity=rightvelocity-dVel
            end
            if (auxiliaryData[1]==2009) then
                -- left key
                leftvelocity=leftvelocity-dVel
                rightvelocity=rightvelocity+dVel
            end
            if (auxiliaryData[1]==2010) then
                -- right key
                leftvelocity=leftvelocity+dVel
                rightvelocity=rightvelocity-dVel
            end
        end
        message,auxiliaryData=sim.getSimulatorMessage()
    end
    
    if leftvelocity&gt;MaxVel then
        leftvelocity=MaxVel
    end
    if leftvelocity&lt;-MaxVel then
        leftvelocity=-MaxVel
    end
    
    if rightvelocity&gt;MaxVel then
                rightvelocity=MaxVel
    end
    if rightvelocity&lt;-MaxVel then
                rightvelocity=-MaxVel
    end
    
    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)
    sim.setJointTargetVelocity(left_back_handle,leftvelocity)
    sim.setJointTargetVelocity(right_back_handle,rightvelocity)
    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)
    
end </pre>
<p>成功使用方向鍵控制模型，下週將會加入視覺傳感器與力傳感器，讓模型在遇到物體時可以自動避開。</p>
<p></p>
<h2>W8</h2>
<p>本週我們加入了力傳感器、視覺傳感器，讓模型在碰觸障礙物時，可以自行避開並選擇路徑上無障礙物之路線進行移動。</p>
<p>下圖為模擬圖:</p>
<p><img alt="" height="1400" src="/images/EV3-15.gif" width="2560"/></p>
<p><strong>模型Lua:</strong></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    
    
end

function sysCall_actuation()
    
end

function sysCall_sensing()
    
end

function sysCall_cleanup()
    
end



function sysCall_afterDelete(inData)
    for key,value in pairs(inData.objectHandles) do
        print("Object with handle "..key.." was deleted")
    end
    
end

function sysCall_afterCreate(inData)
    for key,value in pairs(inData.objectHandles) do
        print("Object with handle "..value.." was created")
    end
end
--]]
function speedChange_callback(ui,id,newVal)
    speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100
end

function sysCall_init()
    
    bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self) 
    leftMotor=sim.getObjectHandle("bubbleRob_leftMotor") 
    rightMotor=sim.getObjectHandle("bubbleRob_rightMotor") 
    noseSensor=sim.getObjectHandle("bubbleRob_sensingNose") 
    minMaxSpeed={120*math.pi/180,300*math.pi/180} 
    backUntilTime=-1 
   
        xml = '&lt;ui title="'..sim.getObjectName(bubbleRobBase)..' speed" closeable="false" resizeable="false" activate="false"&gt;'..[[
        &lt;hslider minimum="0" maximum="100" onchange="speedChange_callback" id="1"/&gt;
        &lt;label text="" style="* {margin-left: 300px;}"/&gt;
        &lt;/ui&gt;
        ]]
    ui=simUI.create(xml)
    speed=(minMaxSpeed[1]+minMaxSpeed[2])*1
    simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))
end

function sysCall_actuation()
    result=sim.readProximitySensor(noseSensor) 
    
    if (result&gt;0) then backUntilTime=sim.getSimulationTime()+4 end 

    if (backUntilTime&lt;sim.getSimulationTime()) then
        
        sim.setJointTargetVelocity(leftMotor,speed)
        sim.setJointTargetVelocity(rightMotor,speed)
    else
        
        sim.setJointTargetVelocity(leftMotor,-speed/5)
        sim.setJointTargetVelocity(rightMotor,-speed/200)
    end
end

function sysCall_cleanup()
	simUI.destroy(ui)
end</pre>
<p><strong>路徑Lua:</strong></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">require('graph_customization')</pre>
<p><strong>力傳感器Lua:</strong></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end

function sysCall_init()
end

function sysCall_trigger(inData)
    -- callback function automatically added for backward compatibility
    sim.breakForceSensor(inData.handle)
end</pre>
<p><strong>視覺傳感器Lua:</strong></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
end

function sysCall_vision(inData)
    -- callback function automatically added for backward compatibility
    -- (vision sensor have no filters anymore, but rather a callback function where image processing can be performed)
    local retVal={}
    retVal.trigger=false
    retVal.packedPackets={}
    simVision.sensorImgToWorkImg(inData.handle)
    simVision.edgeDetectionOnWorkImg(inData.handle,0.200000)
    simVision.workImgToSensorImg(inData.handle,false)
    return retVal
end
</pre>
<p></p>
<h2>W9</h2>
<p>期中考週，各分組進行 5-10 分鐘的網際 stage2 分組專案報告, 並透過 ShareX 錄製簡報影片 (簡報前後按下 Shift + PrintScreen, 並採全畫面錄影), 之後會將各組簡報影片送到 GDrive 公開展示, W15 之前將要求各組針對 stage1 與 stage2 的其他組別專案進行互評, 以供實際評分參考。</p>
<p><span>Group r</span><span>epository : </span><a href="https://github.com/a40823112/stage2-ag1">stage2-ag1</a></p>
<p><span>Group website : <a href="https://a40823112.github.io/stage2-ag1/content/index.html">stage2-ag1</a></span></p>
<p><span></span></p>
<h1>Final</h1>
<p><span>以下頁籤為開學第十週(W10)~第十八週(W18)之內容</span></p>
<h2>W10-task1</h2>
<p>利用國立虎尾科技科技大學機械設計工程系cd2021下的task1進行作業。</p>
<p>讀取 stage3_2a.txt, 建立 Stage3 的分組倉儲, 分組網頁, 以及各組員倉儲及網頁連結.</p>
<p>已知<span> </span><a href="http://mde.tw/cd2021/downloads/stage3/stage3_2a.txt">stage3_2a.txt</a><span>內容, 以及初步資料讀取程式:</span></p>
<p><span><strong>程式碼(version1):</strong> </span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># open file, default is read mode, since txt content no chinese char4
# no encoding = "UTF- 08" is needed
with open("stage3_2a.txt") as fh:
    # readlines will read into the whole line and put into list format 23
    # has \n at the end of each line 13
    data = fh.readlines()
#print(len(data))1
for i in range(len(data)):
    group = data[i].rstrip("\n").split("\t")
    print('&lt;p&gt;'+group[0]+'|&lt;a href="https://'+group[1]+'.github.io/stage3-ag'+group[0][9]+'"&gt;網站&lt;/a&gt;|&lt;a href="https://github.com/'+group[2]+'/stage3-ag'+group[0][9]+'"&gt;倉儲&lt;/a&gt;&lt;/p&gt;')
    for j in range(2,18,2):
        print('&lt;p&gt;'+group[j]+'|Website:'+'&lt;a href="https://'+group[j]+'.github.io/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+'|Repository:'+'&lt;a href="https://github.com/'+group[j]+'/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;&lt;/p&gt;')</pre>
<p>version1程式中檔案資料夾 <a href="http://mde.tw/cd2021/downloads/stage3/stage3_2a.txt">stage3_2a.txt</a> 其中學號有誤，會導致排序有誤。</p>
<p><strong>程式碼(version2):</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># open file, default is read mode, since txt content no chinese char4
# no encoding = "UTF-08" is needed
with open("stage3_2a.txt") as fh:
    # readlines will read into the whole line and put into list format 23
    # has \n at the end of each line 13
    data = fh.readlines()
    data = [a.replace('4823122','40823122') for a in data]
    data = [c.replace('\t\t\t\t','') for c in data]
    print(data)
#print(len(data))1
for i in range(len(data)):
    group = data[i].rstrip("\n").split("\t")
    print('&lt;p&gt;'+group[0]+'|&lt;a href="https://'+group[1]+'.github.io/stage3-ag'+group[0][9]+'"&gt;網站&lt;/a&gt;|&lt;a href="https://github.com/'+group[2]+'/stage3-ag'+group[0][9]+'"&gt;倉儲&lt;/a&gt;&lt;/p&gt;')
# the following will use group data to generate needed html
  
    for j in range(2,18,2):
        try:
            print('&lt;p&gt;'+group[j]+'|Website:'+'&lt;a href="https://'+group[j]+'.github.io/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+'|Repository:'+'&lt;a href="https://github.com/'+group[j]+'/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;&lt;/p&gt;')
        except:
            continue</pre>
<p><span>version2程式中字串 </span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open("stage3_2a.txt") as fh:</pre>
<p><span>字串為:</span></p>
<p>開啟檔案 stage3_2a</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">data = fh.readlines()</pre>
<p>字串為:</p>
<p><span>用於讀取所有行(直到結束)並返回列表，該列表可以由Python的for... in ...結構進行處理。</span></p>
<p><span><span>如果碰到結束，則返回空字符串。</span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">data = [a.replace('4823122','40823122') for a in data]</pre>
<p><span>字串為:</span></p>
<p><span>把字符串中的old（舊字符串） 替換成new(新字符串)，如果指定第三個參數max，則替換不超過max 次，等於把 "4823112" 換成 "40823112"</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">data = [c.replace('\t\t\t\t','') for c in data]</pre>
<p>字串為:</p>
<p><code class="py plain">(</code><code class="py string">'\t\t\t\t'</code><code class="py plain">,'')將排序出來的結果作空格</code></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">for i in range(len(data)):
    group = data[i].rstrip("\n").split("\t")</pre>
<p><span>字串為:</span></p>
<p><span>分析檔案範圍有六組，進行迴圈，變數為i</span></p>
<p><span>將data列表中第i項，去除元素\n(換行)利用\t(空格)分割變成元素(逗號自動補上)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"> print('&lt;p&gt;'+group[0]+'|&lt;a href="https://'+group[1]+'.github.io/stage3-ag'+group[0][9]+'"&gt;網站&lt;/a&gt;|&lt;a href="https://github.com/'+group[2]+'/stage3-ag'+group[0][9]+'"&gt;倉儲&lt;/a&gt;&lt;/p&gt;')</pre>
<p><span>字串為:</span></p>
<p><span>group[0][9]=第0個第9位</span></p>
<p><span>用print依序索引group list 中的元素，放入html格式，依序列出</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">for j in range(2,18,2):</pre>
<p><span>字串為:</span></p>
<p>從2開始每次跳2格最多跳到16不可超過18</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">try:
            print('&lt;p&gt;'+group[j]+'|Website:'+'&lt;a href="https://'+group[j]+'.github.io/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+'|Repository:'+'&lt;a href="https://github.com/'+group[j]+'/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;&lt;/p&gt;')
        except:
            continue</pre>
<p>用print依序索引group list 中的元素，放入html格式，依序列出來</p>
<p>  差別在於這行取組員的但因為有一組只有6人超出範圍所以一定會error。</p>
<p>列出各分組倉儲, 分組網站與學員倉儲及學員網站連結:</p>
<p>stage3_ag1 |<span> </span><a href="https://40823131.github.io/stage3-ag1">網站</a><span> </span>|<span> </span><a href="https://github.com/40823131/stage3-ag1">倉儲</a></p>
<p>40823131 | Website:<a href="https://40823131.github.io/cd2021">40823131</a><span> </span>| Repository:<a href="https://github.com/40823131/cd2021">40823131</a><span> </span>| Group Website:<a href="https://40823131.github.io/stage3-ag1">40823131</a></p>
<p>a40823112 | Website:<a href="https://a40823112.github.io/cd2021">a40823112</a><span> </span>| Repository:<a href="https://github.com/a40823112/cd2021">a40823112</a><span> </span>| Group Website:<a href="https://a40823112.github.io/stage3-ag1">a40823112</a></p>
<p>40823123 | Website:<a href="https://40823123.github.io/cd2021">40823123</a><span> </span>| Repository:<a href="https://github.com/40823123/cd2021">40823123</a><span> </span>| Group Website:<a href="https://40823123.github.io/stage3-ag1">40823123</a></p>
<p>40823145 | Website:<a href="https://40823145.github.io/cd2021">40823145</a><span> </span>| Repository:<a href="https://github.com/40823145/cd2021">40823145</a><span> </span>| Group Website:<a href="https://40823145.github.io/stage3-ag1">40823145</a></p>
<p>40823136 | Website:<a href="https://40823136.github.io/cd2021">40823136</a><span> </span>| Repository:<a href="https://github.com/40823136/cd2021">40823136</a><span> </span>| Group Website:<a href="https://40823136.github.io/stage3-ag1">40823136</a></p>
<p>40823109 | Website:<a href="https://40823109.github.io/cd2021">40823109</a><span> </span>| Repository:<a href="https://github.com/40823109/cd2021">40823109</a><span> </span>| Group Website:<a href="https://40823109.github.io/stage3-ag1">40823109</a></p>
<p>40823116 | Website:<a href="https://40823116.github.io/cd2021">40823116</a><span> </span>| Repository:<a href="https://github.com/40823116/cd2021">40823116</a><span> </span>| Group Website:<a href="https://40823116.github.io/stage3-ag1">40823116</a></p>
<p>40823108 | Website:<a href="https://40823108.github.io/cd2021">40823108</a><span> </span>| Repository:<a href="https://github.com/40823108/cd2021">40823108</a><span> </span>| Group Website:<a href="https://40823108.github.io/stage3-ag1">40823108</a></p>
<p>stage3_ag2 |<span> </span><a href="https://40823151.github.io/stage3-ag2">網站</a><span> </span>|<span> </span><a href="https://github.com/40823151/stage3-ag2">倉儲</a></p>
<p>40823151 | Website:<a href="https://40823151.github.io/cd2021">40823151</a><span> </span>| Repository:<a href="https://github.com/40823151/cd2021">40823151</a><span> </span>| Group Website:<a href="https://40823151.github.io/stage3-ag2">40823151</a></p>
<p>40623121 | Website:<a href="https://40623121.github.io/cd2021">40623121</a><span> </span>| Repository:<a href="https://github.com/40623121/cd2021">40623121</a><span> </span>| Group Website:<a href="https://40623121.github.io/stage3-ag2">40623121</a></p>
<p>40871106 | Website:<a href="https://40871106.github.io/cd2021">40871106</a><span> </span>| Repository:<a href="https://github.com/40871106/cd2021">40871106</a><span> </span>| Group Website:<a href="https://40871106.github.io/stage3-ag2">40871106</a></p>
<p>40823102 | Website:<a href="https://40823102.github.io/cd2021">40823102</a><span> </span>| Repository:<a href="https://github.com/40823102/cd2021">40823102</a><span> </span>| Group Website:<a href="https://40823102.github.io/stage3-ag2">40823102</a></p>
<p>40823104 | Website:<a href="https://40823104.github.io/cd2021">40823104</a><span> </span>| Repository:<a href="https://github.com/40823104/cd2021">40823104</a><span> </span>| Group Website:<a href="https://40823104.github.io/stage3-ag2">40823104</a></p>
<p>40823106 | Website:<a href="https://40823106.github.io/cd2021">40823106</a><span> </span>| Repository:<a href="https://github.com/40823106/cd2021">40823106</a><span> </span>| Group Website:<a href="https://40823106.github.io/stage3-ag2">40823106</a></p>
<p>40823101 | Website:<a href="https://40823101.github.io/cd2021">40823101</a><span> </span>| Repository:<a href="https://github.com/40823101/cd2021">40823101</a><span> </span>| Group Website:<a href="https://40823101.github.io/stage3-ag2">40823101</a></p>
<p>40823132 | Website:<a href="https://40823132.github.io/cd2021">40823132</a><span> </span>| Repository:<a href="https://github.com/40823132/cd2021">40823132</a><span> </span>| Group Website:<a href="https://40823132.github.io/stage3-ag2">40823132</a></p>
<p>stage3_ag3 |<span> </span><a href="https://40823119.github.io/stage3-ag3">網站</a><span> </span>|<span> </span><a href="https://github.com/40823119/stage3-ag3">倉儲</a></p>
<p>40823119 | Website:<a href="https://40823119.github.io/cd2021">40823119</a><span> </span>| Repository:<a href="https://github.com/40823119/cd2021">40823119</a><span> </span>| Group Website:<a href="https://40823119.github.io/stage3-ag3">40823119</a></p>
<p>40823150 | Website:<a href="https://40823150.github.io/cd2021">40823150</a><span> </span>| Repository:<a href="https://github.com/40823150/cd2021">40823150</a><span> </span>| Group Website:<a href="https://40823150.github.io/stage3-ag3">40823150</a></p>
<p>40823103 | Website:<a href="https://40823103.github.io/cd2021">40823103</a><span> </span>| Repository:<a href="https://github.com/40823103/cd2021">40823103</a><span> </span>| Group Website:<a href="https://40823103.github.io/stage3-ag3">40823103</a></p>
<p>40823107 | Website:<a href="https://40823107.github.io/cd2021">40823107</a><span> </span>| Repository:<a href="https://github.com/40823107/cd2021">40823107</a><span> </span>| Group Website:<a href="https://40823107.github.io/stage3-ag3">40823107</a></p>
<p>40523252 | Website:<a href="https://40523252.github.io/cd2021">40523252</a><span> </span>| Repository:<a href="https://github.com/40523252/cd2021">40523252</a><span> </span>| Group Website:<a href="https://40523252.github.io/stage3-ag3">40523252</a></p>
<p>40823154 | Website:<a href="https://40823154.github.io/cd2021">40823154</a><span> </span>| Repository:<a href="https://github.com/40823154/cd2021">40823154</a><span> </span>| Group Website:<a href="https://40823154.github.io/stage3-ag3">40823154</a></p>
<p>stage3_ag4 |<span> </span><a href="https://40823142.github.io/stage3-ag4">網站</a><span> </span>|<span> </span><a href="https://github.com/40823142/stage3-ag4">倉儲</a></p>
<p>40823142 | Website:<a href="https://40823142.github.io/cd2021">40823142</a><span> </span>| Repository:<a href="https://github.com/40823142/cd2021">40823142</a><span> </span>| Group Website:<a href="https://40823142.github.io/stage3-ag4">40823142</a></p>
<p>40823144 | Website:<a href="https://40823144.github.io/cd2021">40823144</a><span> </span>| Repository:<a href="https://github.com/40823144/cd2021">40823144</a><span> </span>| Group Website:<a href="https://40823144.github.io/stage3-ag4">40823144</a></p>
<p>40823127 | Website:<a href="https://40823127.github.io/cd2021">40823127</a><span> </span>| Repository:<a href="https://github.com/40823127/cd2021">40823127</a><span> </span>| Group Website:<a href="https://40823127.github.io/stage3-ag4">40823127</a></p>
<p>40823148 | Website:<a href="https://40823148.github.io/cd2021">40823148</a><span> </span>| Repository:<a href="https://github.com/40823148/cd2021">40823148</a><span> </span>| Group Website:<a href="https://40823148.github.io/stage3-ag4">40823148</a></p>
<p>40823121 | Website:<a href="https://40823121.github.io/cd2021">40823121</a><span> </span>| Repository:<a href="https://github.com/40823121/cd2021">40823121</a><span> </span>| Group Website:<a href="https://40823121.github.io/stage3-ag4">40823121</a></p>
<p>40823135 | Website:<a href="https://40823135.github.io/cd2021">40823135</a><span> </span>| Repository:<a href="https://github.com/40823135/cd2021">40823135</a><span> </span>| Group Website:<a href="https://40823135.github.io/stage3-ag4">40823135</a></p>
<p>40823114 | Website:<a href="https://40823114.github.io/cd2021">40823114</a><span> </span>| Repository:<a href="https://github.com/40823114/cd2021">40823114</a><span> </span>| Group Website:<a href="https://40823114.github.io/stage3-ag4">40823114</a></p>
<p>40823146 | Website:<a href="https://40823146.github.io/cd2021">40823146</a><span> </span>| Repository:<a href="https://github.com/40823146/cd2021">40823146</a><span> </span>| Group Website:<a href="https://40823146.github.io/stage3-ag4">40823146</a></p>
<p>stage3_ag5 |<span> </span><a href="https://40823111.github.io/stage3-ag5">網站</a><span> </span>|<span> </span><a href="https://github.com/40823111/stage3-ag5">倉儲</a></p>
<p>40823111 | Website:<a href="https://40823111.github.io/cd2021">40823111</a><span> </span>| Repository:<a href="https://github.com/40823111/cd2021">40823111</a><span> </span>| Group Website:<a href="https://40823111.github.io/stage3-ag5">40823111</a></p>
<p>40823115 | Website:<a href="https://40823115.github.io/cd2021">40823115</a><span> </span>| Repository:<a href="https://github.com/40823115/cd2021">40823115</a><span> </span>| Group Website:<a href="https://40823115.github.io/stage3-ag5">40823115</a></p>
<p>40823128 | Website:<a href="https://40823128.github.io/cd2021">40823128</a><span> </span>| Repository:<a href="https://github.com/40823128/cd2021">40823128</a><span> </span>| Group Website:<a href="https://40823128.github.io/stage3-ag5">40823128</a></p>
<p>40823120 | Website:<a href="https://40823120.github.io/cd2021">40823120</a><span> </span>| Repository:<a href="https://github.com/40823120/cd2021">40823120</a><span> </span>| Group Website:<a href="https://40823120.github.io/stage3-ag5">40823120</a></p>
<p>40823140 | Website:<a href="https://40823140.github.io/cd2021">40823140</a><span> </span>| Repository:<a href="https://github.com/40823140/cd2021">40823140</a><span> </span>| Group Website:<a href="https://40823140.github.io/stage3-ag5">40823140</a></p>
<p>40823124 | Website:<a href="https://40823124.github.io/cd2021">40823124</a><span> </span>| Repository:<a href="https://github.com/40823124/cd2021">40823124</a><span> </span>| Group Website:<a href="https://40823124.github.io/stage3-ag5">40823124</a></p>
<p>40823139 | Website:<a href="https://40823139.github.io/cd2021">40823139</a><span> </span>| Repository:<a href="https://github.com/40823139/cd2021">40823139</a><span> </span>| Group Website:<a href="https://40823139.github.io/stage3-ag5">40823139</a></p>
<p>40823126 | Website:<a href="https://40823126.github.io/cd2021">40823126</a><span> </span>| Repository:<a href="https://github.com/40823126/cd2021">40823126</a><span> </span>| Group Website:<a href="https://40823126.github.io/stage3-ag5">40823126</a></p>
<p>stage3_ag6 |<span> </span><a href="https://40823152.github.io/stage3-ag6">網站</a><span> </span>|<span> </span><a href="https://github.com/40823152/stage3-ag6">倉儲</a></p>
<p>40823152 | Website:<a href="https://40823152.github.io/cd2021">40823152</a><span> </span>| Repository:<a href="https://github.com/40823152/cd2021">40823152</a><span> </span>| Group Website:<a href="https://40823152.github.io/stage3-ag6">40823152</a></p>
<p>40823110 | Website:<a href="https://40823110.github.io/cd2021">40823110</a><span> </span>| Repository:<a href="https://github.com/40823110/cd2021">40823110</a><span> </span>| Group Website:<a href="https://40823110.github.io/stage3-ag6">40823110</a></p>
<p>40823122 | Website:<a href="https://40823122.github.io/cd2021">40823122</a><span> </span>| Repository:<a href="https://github.com/40823122/cd2021">40823122</a><span> </span>| Group Website:<a href="https://40823122.github.io/stage3-ag6">40823122</a></p>
<p>40823125 | Website:<a href="https://40823125.github.io/cd2021">40823125</a><span> </span>| Repository:<a href="https://github.com/40823125/cd2021">40823125</a><span> </span>| Group Website:<a href="https://40823125.github.io/stage3-ag6">40823125</a></p>
<p>40823117 | Website:<a href="https://40823117.github.io/cd2021">40823117</a><span> </span>| Repository:<a href="https://github.com/40823117/cd2021">40823117</a><span> </span>| Group Website:<a href="https://40823117.github.io/stage3-ag6">40823117</a></p>
<p>40823129 | Website:<a href="https://40823129.github.io/cd2021">40823129</a><span> </span>| Repository:<a href="https://github.com/40823129/cd2021">40823129</a><span> </span>| Group Website:<a href="https://40823129.github.io/stage3-ag6">40823129</a></p>
<p>40823149 | Website:<a href="https://40823149.github.io/cd2021">40823149</a><span> </span>| Repository:<a href="https://github.com/40823149/cd2021">40823149</a><span> </span>| Group Website:<a href="https://40823149.github.io/stage3-ag6">40823149</a></p>
<p>40823153 | Website:<a href="https://40823153.github.io/cd2021">40823153</a><span> </span>| Repository:<a href="https://github.com/40823153/cd2021">40823153</a><span> </span>| Group Website:<a href="https://40823153.github.io/stage3-ag6">40823153</a></p>
<h2>W11-task2</h2>
<p>執行Task2，<span>stage1 與 stage2 所完成的 coppeliasim 場景, 採 Python remote API 進行操控, 並將過程拍成影片。</span></p>
<p><span>CoppeliaSim 使用 <a href="http://a.kmol.info:88/CoppeliaSimEdu_4.2.0.7z">4.2.0 版</a><span>.</span></span></p>
<p><span><span>將stage1 與 stage2 所完成的coppeliasim場景, 使用 Python remote API 進行操控:</span></span></p>
<p><span><span><img alt="" height="869" src="/images/coppeliasim-30.gif" width="1674"/></span></span></p>
<p><span><span> CoppeliaSim 場景進行操控:</span></span></p>
<p>首先將下方紅框處的3個檔案與要執行的.ttt檔案放在同一個資寮夾。</p>
<p><img alt="" height="649" src="/images/coppeliasim-24.JPG" width="1171"/></p>
<p>接下來將.Py檔放入(Untitled)-SciTE，並修改第一行為: sim as vrep，再將下方馬達換成對應名稱</p>
<p><img alt="" height="729" src="/images/coppeliasim-25.JPG" width="562"/></p>
<p>接下來將逞景整體加入腳本</p>
<p><img alt="" height="1080" src="/images/coppeliasim-26.JPG" width="1920"/></p>
<p>第一個腳本</p>
<p><img alt="" height="830" src="/images/coppeliasim-27.JPG" width="1003"/></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">simRemoteApi.start(19999)</pre>
<p>第二個腳本</p>
<p><img alt="" height="1080" src="/images/coppeliasim-28.JPG" width="1920"/></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
	-- Put your thread code here (initialization and clean-up code should not be in here)

	
	-- Some EXTERNAL commands (e.g. socket commands provided by Lua libraries)
	-- might appear as blocking to the simulator. In that case, you can define
	-- a non-blocking section as following example shows:
	--
	-- sim.setThreadIsFree(true) -- Start of the non-blocking section
	--
	-- Following 2 lines are meant as an example of EXTERNAL blocking commands:
	-- http = require("socket.http")
	-- print(http.request("http://www.google.com"))
	--
	-- sim.setThreadIsFree(false) -- End of the non-blocking section
	--
	-- While in a non-blocking section, try to avoid calling sim-functions. Also
	-- never forget to close the blocking section, otherwise V-REP will hang.
	-- Make sure you read the information related to the sim.setThreadIsFree
	-- API function in V-REP's documentation.


	-- If you wish to synchronize a threaded loop with each simulation pass,
	-- set the thread switch timing in the initialization phase of this script
	-- to the maximum (200), and manually switch thread here with the
	-- sim.switchThread() command. 
	-- ( sim.switchThread() will suspend this script's execution until next
	-- simulation pass, i.e. until the simulation time has changed )
	--
	-- Following example illustrates this:
	-- 
	-- while true do
	--     local p=sim.getObjectPosition(objHandle,-1)
	--     p[1]=p[1]+0.001
	--     sim.setObjectPosition(objHandle,-1,p)
	--     sim.switchThread()
	-- end
end

-- Put some initialization code here:
sim.setThreadSwitchTiming(2) -- Default timing for automatic thread switching

-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
	sim.addStatusbarMessage('Lua runtime error: '..err)
end

-- Put some clean-up code here:
simRemoteApi.start(19999)</pre>
<p>成功執行畫面</p>
<p><img alt="" height="1080" src="/images/coppeliasim-29.JPG" width="1920"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import sys
# child threaded script: 
#simExtRemoteApiStart(19999)
 
vrep.simxFinish(-1)
 
clientID = vrep.simxStart('127.0.0.1', 19999, True, True, 5000, 5)
 
if clientID!= -1:
    print("Connected to remote server")
else:
    print('Connection not successful')
    sys.exit('Could not connect')
 
errorCode,left_motor_handle=vrep.simxGetObjectHandle(clientID,'left_m',vrep.simx_opmode_oneshot_wait)
 
errorCode,right_motor_handle=vrep.simxGetObjectHandle(clientID,'right_m',vrep.simx_opmode_oneshot_wait)
 
if errorCode == -1:
    print('Can not find left or right motor')
    sys.exit()
 
errorCode=vrep.simxSetJointTargetVelocity(clientID,left_motor_handle,0, vrep.simx_opmode_oneshot_wait)
errorCode=vrep.simxSetJointTargetVelocity(clientID,right_motor_handle,2, vrep.simx_opmode_oneshot_wait)</pre>
<p></p>
<h2>W12-task3</h2>
<p>下載 <a href="https://obsproject.com/">OBS</a> 並使用 <a href="https://www.youtube.com/channel/UCd3WMYoS7LQ5-Yh1u7gXbpA">Youtube</a> 進行直播，<span>每週各組按照組員順序, 於每堂課程時段, 輪流由 2-3 名同學開啟，<br/>因帳號第一次直播需要24小時後才能開播，須於下次上課前準備好此功能。</span></p>
<p><span>下圖為鎖定頁面:</span></p>
<p><span><img alt="" height="597" src="/images/obs-1.png" width="1024"/></span></p>
<p><span>下方為解鎖後測試結果:</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/E5RSCmZYSoc" title="YouTube video player" width="560"></iframe></p>
<p><span>下載 <a href="https://obsproject.com/">OBS</a> ，OBS軟體在擷取顯示器時是使用內顯，現在大部分筆電都有獨顯，所以在安裝玩OBS要擷取顯示器時會出現無法擷取顯示器的問題。</span></p>
<p><span>以下講解如何解決顯示器無法擷取問題:</span></p>
<h4><span>Step1:</span></h4>
<p>  開啟顯示設定</p>
<p><img caption="false" height="1080" src="/images/obs-2.png" width="1920"/></p>
<h4>Step2:</h4>
<p>  點選下方圖形設定</p>
<p><img alt="" height="1402" src="/images/obs-3.PNG" width="1016"/></p>
<h4>Step3:</h4>
<p>  點選瀏覽</p>
<p><img caption="false" height="1080" src="/images/obs-4.png" width="1920"/></p>
<h4>Step4:</h4>
<p>  選取obs64.exe，因使用者不同路徑有所變化，個人之路徑為:</p>
<p><img alt="" height="716" src="/images/obs-5.png" width="1188"/></p>
<h4>Step5:</h4>
<p>  選完應用程式後，點選程式欄位下方選項的位置</p>
<p><img caption="false" height="1080" src="/images/obs-6.png" width="1920"/></p>
<h4>Step6:</h4>
<p>  這時圖形偏好設定對話框會跳出此時點選省電模式並按下儲存，OBS就能擷取到顯示器。</p>
<p><span>圖形偏好設定對話框有三個選項:</span></p>
<p>1.讓Windoes決定: 預設使用獨顯</p>
<p>2.省電: 下方有標記是內顯</p>
<p>3.高效能: <span>下方有標記是獨顯</span></p>
<p>因<span>OBS軟體在擷取顯示器時是使用內顯，所以選取省電模式</span></p>
<p><span><img alt="" height="320" src="/images/obs-7.png" width="413"/></span></p>
<h4><span>Step7:</span></h4>
<p>  成功擷取</p>
<p><img alt="" height="759" src="/images/obs-8.PNG" width="1081"/></p>
<p></p>
<h2>W13</h2>
<p>為因應校方公告:</p>
<p><a href="http://mde.tw/cd2021/downloads/%E3%80%8C%E5%9A%B4%E9%87%8D%E7%89%B9%E6%AE%8A%E5%82%B3%E6%9F%93%E6%80%A7%E8%82%BA%E7%82%8E%E3%80%8D%E7%96%AB%E6%83%85%E8%AA%B2%E7%A8%8B%E5%BD%88%E6%80%A7%E8%99%95%E7%90%86%E4%BA%8B%E9%A0%85_%E9%81%A0%E8%B7%9D%E6%95%99%E5%AD%B8%E5%85%AC%E5%91%8A_0515D(%E4%B8%AD%E8%8B%B1%E7%89%88%E6%9C%AC).pdf">「嚴重特殊傳染性肺炎」疫情課程彈性處理事項_遠距教學公告_0515D(中英版本).pdf</a></p>
<p>5月17日至5月30日全校所有課程改採遠距教學.</p>
<p>本課程將在 W13-W14 週採取同步線上模式上課, 修課人員應密切注意 <a href="https://gitter.im/mdecourse/cd2021">https://gitter.im/mdecourse/cd2021</a><span> </span>上之公告, 線上同步上課將採 OBS + Youtube 配合<span> </span><a href="https://meet.google.com/">https://meet.google.com</a><span> </span>直播方式進行,<span> </span><span>修課人員</span>必須事先登入 github 帳號與 @gm 電子郵箱帳號, 以便在課程直播網站上留言討論.</p>
<p>同步直播課程進行過程將指定各組員針對課程內容進行直播操作, 負責直播<span>修課人員</span>必須即時將直播網址公布於<span> </span><a href="https://gitter.im/mdecourse/cd2021">https://gitter.im/mdecourse/cd2021</a>, 以便與其他修課生及老師進行互動.</p>
<p>課程同步直播時段將與上課時段相同, 每段直播中間的暫停時間將視實際情況決定。</p>
<p>與組員同步直播</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/a8Uw1WOhCYk" title="YouTube video player" width="560"></iframe></p>
<p><strong>RoboDK:</strong></p>
<p>以下為robodk模擬:</p>
<p>1.先開啟start.bat</p>
<p>2.再開啟可攜版robodk路徑如下:</p>
<p>F:\robodk522_portable\bin\RoboDK.exe</p>
<p>3.點選robodk左上角開啟檔案選取:F:\robodk522_portable\examples\pick_and_place\pick_and_place_with_python.rdk</p>
<p>4開啟(Untitled-SciTE)並將下方路徑檔案放入F:\robodk522_portable\examples\pick_and_place\pick_and_place.py<br/>點選Tools--&gt;GO</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/US5KIOwWJ0E" title="YouTube video player" width="560"></iframe></p>
<p>下方為<span>pick_and_place.py檔:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># KMOLab Portable RoboDK pick and place
from robolink import *    # API to communicate with robodk
from robodk import *      # robodk robotics toolbox

# Setup global parameters
BALL_DIAMETER = 100 # diameter of one ball
APPROACH = 100      # approach distance to grab each part, in mm
nTCPs = 6           # number of TCP's in the tool

#----------------------------------------------
# Function definitions

def box_calc(BALLS_SIDE=4, BALLS_MAX=None):
    """Calculate a list of points (ball center) as if the balls were stored in a box"""
    if BALLS_MAX is None: BALLS_MAX = BALLS_SIDE**3
    xyz_list = []
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE):
            for j in range(BALLS_SIDE):
                xyz_list = xyz_list + [[(i+0.5)*BALL_DIAMETER, (j+0.5)*BALL_DIAMETER, (h+0.5)*BALL_DIAMETER]]
                if len(xyz_list) &gt;= BALLS_MAX:
                    return xyz_list
    return xyz_list

def pyramid_calc(BALLS_SIDE=4):
    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""
    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
    BALL_DIAMETER = 100
    xyz_list = []
    sqrt2 = 2**(0.5)
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE-h):
            for j in range(BALLS_SIDE-h):
                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
    return xyz_list

def balls_setup(frame, positions):
    """Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""
    nballs = len(positions)
    step = 1.0/(nballs - 1)
    for i in range(nballs):
        newball = frame.Paste()
        newball.setName('ball ' + str(i)) #set item name
        newball.setPose(transl(positions[i])) #set item position with respect to parent
        newball.setVisible(True, False) #make item visible but hide the reference frame
        newball.Recolor([1-step*i, step*i, 0.2, 1]) #set RGBA color

def cleanup_balls(parentnodes):
    """Delete all child items whose name starts with \"ball\", from the provided list of parent items."""
    todelete = []
    for item in parentnodes:
        todelete = todelete + item.Childs()

    for item in todelete:
        if item.Name().startswith('ball'):
            item.Delete()

def TCP_On(toolitem, tcp_id):
    """Attach the closest object to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""
    toolitem.AttachClosest()
    toolitem.RDK().RunMessage('Set air valve %i on' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_On(%i)' % (tcp_id+1));
        
def TCP_Off(toolitem, tcp_id, itemleave=0):
    """Detaches the closest object attached to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""
    toolitem.DetachAll(itemleave)
    toolitem.RDK().RunMessage('Set air valve %i off' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_Off(%i)' % (tcp_id+1));


#----------------------------------------------------------
# The program starts here:

# Any interaction with RoboDK must be done through RDK:
RDK = Robolink()

# Turn off automatic rendering (faster)
RDK.Render(False)

#RDK.Set_Simulation_Speed(500); # set the simulation speed

# Gather required items from the station tree
robot = RDK.Item('Fanuc M-710iC/50')
robot_tools = robot.Childs()
#robottool = RDK.Item('MainTool')
frame1 = RDK.Item('Table 1')
frame2 = RDK.Item('Table 2')

# Copy a ball as an object (same as CTRL+C)
ballref = RDK.Item('reference ball')
ballref.Copy()

# Run a pre-defined station program (in RoboDK) to replace the two tables
prog_reset = RDK.Item('Replace objects')
prog_reset.RunProgram()

# Call custom procedure to remove old objects
cleanup_balls([frame1, frame2])

# Make a list of positions to place the objects
frame1_list = pyramid_calc(4)
frame2_list = pyramid_calc(4)

# Programmatically place the objects with a custom-made procedure
balls_setup(frame1, frame1_list)

# Delete previously generated tools
for tool in robot_tools:
    if tool.Name().startswith('TCP'):
        tool.Delete()
        
# Calculate tool frames for the suction cup tool of 6 suction cups
TCP_list = []
for i in range(nTCPs):
    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)
    TCPi = robot.AddTool(TCPi_pose, 'TCP %i' % (i+1))
    TCP_list.append(TCPi)

TCP_0 = TCP_list[0]

# Turn on automatic rendering
RDK.Render(True)

# Move balls    
robot.setPoseTool(TCP_list[0])
nballs_frame1 = len(frame1_list)
nballs_frame2 = len(frame2_list)
idTake = nballs_frame1 - 1
idLeave = 0
idTCP = 0
target_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)

while idTake &gt;= 0:
    # ------------------------------------------------------------------
    # first priority: grab as many balls as possible
    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)
    ntake = min(nTCPs, idTake + 1)

    # approach to frame 1
    robot.setPoseFrame(frame1)
    robot.setPoseTool(TCP_0)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.MoveJ(target_app_frame)

    # grab ntake balls from frame 1
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted
        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idTake = idTake - 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_On(TCPi, i)
        robot.MoveL(target_app)
 
    # ------------------------------------------------------------------
    # second priority: unload the tool     
    # approach to frame 2 and place the tool balls into table 2
    robot.setPoseTool(TCP_0)
    robot.MoveJ(target_app_frame)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.setPoseFrame(frame2)    
    robot.MoveJ(target_app_frame)
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        if idLeave &gt; nballs_frame2-1:
            raise Exception("No room left to place objects in Table 2")
        
        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted
        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idLeave = idLeave + 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_Off(TCPi, i, frame2)
        robot.MoveL(target_app)

    robot.MoveJ(target_app_frame)

# Move home when the robot finishes
robot.MoveJ([0,0,0,0,10,-200])
</pre>
<p></p>
<h2>W14</h2>
<p>請簡化上列四軸機械手臂取放方塊零件的 Lua 程式, 去除客製化控制 plugin 語法部分, 且刪除其舊有的 GUI 程式控制介面, 改用 CoppeliaSim 制式的 Lua Script 編寫與原先取放方塊零件相同的操控流程.</p>
<p>請採用 CoppeliaSim<span> </span><a href="https://www.coppeliarobotics.com/helpFiles/en/customUIPlugin.htm">Qt based GUI 介面</a>, 改寫原<span> </span><a href="https://github.com/CoppeliaRobotics/models/blob/master/robots/non-mobile/MTB%20robot.ttm">MTB robot.ttm</a><span> </span>模型中的 legacy GUI 介面視窗.</p>
<p></p>
<h2>W15</h2>
<p>字幕翻譯與整理:<br/><br/></p>
<p><strong>First:</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/IKOGwoJ2HLk" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>We saw this simple two-link robot in the previous lecture about forward kinematics.</p>
<p>我們在前面看到了這個簡單的雙連桿機器人關於正向運動學的講座。</p>
<p>The tooltip pose of the robot is simply described by two numbers, coordinates x and y is relative to the world coordinate system.</p>
<p>該機器人的工具提示姿態由兩個數字簡單描述，坐標 x 和y 相對於世界坐標系。</p>
<p>So, the problem here is that given x and y, we have to determine the connecting angle Q1 and Q2.</p>
<p>所以，這裡的問題是給定 x 和 y，我們要確定連接角 Q1和Q2.</p>
<p>The solution we will follow in this section is geometric one.</p>
<p>我們將在本節中遵循的解決方案是幾何解決方案。</p>
<p>We're going to start with a simple piece of construction.</p>
<p>我們將從一個簡單的結構開始。</p>
<p>We're going to overlay the red triangle on top of our robot.</p>
<p>我們將在我們的機器人頂部覆蓋紅色三角形。</p>
<p>We know that the end point coordinate is x, y, so the vertical height of the triangle is y,horizontal width is x.</p>
<p>我們知道終點坐標是x，y，所以三角形的垂直高度是y，水平寬度是x。</p>
<p>And, using Pythagoras theorem, we can write thagoras r squared equals x squared plus y squared.</p>
<p>並且，使用畢達哥拉斯定理，我們可以寫出 thagoras r 平方等於 x 平方加 y 平方。</p>
<p>So far.so easy</p>
<p>到目前爲止，很容易</p>
<p>Now, we're going to look at this triangle highlighted here in red and we want to determine the angle alpha.</p>
<p>現在，我們將查看此處以紅色突出顯示的三角形，我們要確定角度 alpha。</p>
<p>In order to do that, we need to use the cosine rule.</p>
<p>為了做到這一點，我們需要使用餘弦規則。</p>
<p>And, if you're a little rusty on the cosine rule, here is a bit of a refresher.</p>
<p>而且，如果你對余弦規則有點生疏，這裡有一點複習。</p>
<p>We have an arbitrary triangle.</p>
<p>我們有一個任意三角形。</p>
<p>We don't have to have any right angles in it and we're going to label the length of this edge as A and the angle opposite that edge, we're going to label as little a.</p>
<p>我們不必在其中有任何直角，我們將這條邊的長度標記為 A，而與該邊相對的角度，我們將標記為小 a。</p>
<p>And, we do the same for this edge and this angle, and this edge and this angle.</p>
<p>並且，我們對這條邊和這個角，以及這條邊和這個角做同樣的事情。</p>
<p>So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little a, little b, and little c.</p>
<p>因此，所有邊都標記為大寫字母 A、B 和 C，角標記為小 a、小 b 和小 c。</p>
<p>So, the cosine rule is simply this relationship here.</p>
<p>所以，餘弦規則就是這裡的這種關係。</p>
<p>It's a bit like Pythagoras' theorem except for this extra term on the end with the cos a in it.</p>
<p>它有點像畢達哥拉斯的定理，除了最後一個額外的術語，其中有 cos a。</p>
<p>Now, let's apply the cosine rule to the particular triangle we looked at a moment rul ago.</p>
<p>現在，讓我們將餘弦規則應用於我們剛才看到的特定三角形。</p>
<p>It's pretty straightforward to write down this particular relationship.</p>
<p>寫下這種特殊關係非常簡單。</p>
<p>We can isolate the term cos alpha which gives us the angle alpha that we're interested in.</p>
<p>我們可以分離出術語 cos alpha，它為我們提供了我們感興趣的角度 alpha。</p>
<p>And, it's defined in terms of the constant link lengths, A1 and A2 and the position of the end effector,x and y.</p>
<p>而且，它是根據恆定連桿長度 A1 和 A2 以及末端執行器的位置 x 和 y 定義的。</p>
<p>We can write this simple relationship between the angles alpha and Q2.</p>
<p>我們可以寫出角度 alpha 和 Q2 之間的這種簡單關係。</p>
<p>And, we know from the shape of the cosine function that cos of Q2 must be equal to negative of cos alpha.</p>
<p>而且，我們從餘弦函數的形狀知道，Q2 的 cos 必須等於 cos alpha 的負值。</p>
<p>This time, let's just write an expression for the cosine of the joined angle Q2.</p>
<p>這一次，讓我們為連接角 Q2 的餘弦寫一個表達式。</p>
<p>Now, we're going to draw yet another red triangle and we're going apply some simple trigonometry here.</p>
<p>現在，我們將繪製另一個紅色三角形，並在此處應用一些簡單的三角函數。</p>
<p>If we know Q2, then we know this length and this length of the red triangle.</p>
<p>如果我們知道 Q2，那麼我們就知道這個長度和這個紅色三角形的長度。</p>
<p>We can write this relationship for the sine of the joined angle Q2.</p>
<p>我們可以為連接角 Q2 的正弦寫出這種關係。</p>
<p>Now, we can consider this bigger triangle whose angle is beta and this side length of the triangle is given here in blue.</p>
<p>現在，我們可以考慮這個更大的三角形，它的角是β，三角形的這條邊長在這裡用藍色給出。</p>
<p>And, the length of the other side of the triangle is this.</p>
<p>並且，三角形另一邊的長度是這個。</p>
<p>So, now we can write an expression for the angle beta in terms of these parameters here.</p>
<p>所以，現在我們可以在此處根據這些參數編寫角度 beta 的表達式。</p>
<p>Going back to the red triangle that we drew earlier, we can establish a relationship between Q1 and the angle beta.</p>
<p>回到我們之前畫的紅色三角形，我們可以建立Q1和角度β之間的關係。</p>
<p>Introduce yet another angle, this one gamma and we can write a relationship between the angle gamma and the tooltip coordinates x and y.</p>
<p>引入另一個角度，這個伽馬，我們可以寫出角度伽馬和工具提示坐標 x 和 y 之間的關係。</p>
<p>Now, we can write a simple relationship between the angles that we've constructed, gamma and beta and the joined angle we're interested in which is Q1.</p>
<p>現在，我們可以在我們構建的角度 gamma 和 beta 與我們感興趣的連接角度 Q1 之間寫出一個簡單的關係。</p>
<p>And, the total relationship looks something like this.</p>
<p>而且，整個關係看起來像這樣。</p>
<p>Quite a complex relationship, it gives us the angle of joined one, that's Q1 in terms of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it's also a function of the second joint angle, Q2.</p>
<p>相當複雜的關係，它為我們提供了連接的角度，即根據末端執行器坐標 y 和 x 的 Q1，以及一系列常量 a1 和 a2，它也是第二個關節角度 Q2 的函數。</p>
<p>So, let's summarize what it is that we have derived here.1</p>
<p>所以，讓我們總結一下我們在這裡得出的結論。1</p>
<p>We have an expression for the cosine of Q2 and we have an expression for Q1.</p>
<p>我們有 Q2 的餘弦表達式和 Q1 的表達式。</p>
<p>Now, the cosine function is symmetrical about 0.</p>
<p>現在，餘弦函數關於 0 對稱。</p>
<p>So, if we know the value of the cosine of Q2, then there are two possible solutions, a positive angle and a negative angle.</p>
<p>所以，如果我們知道 Q2 的餘弦值，那麼有兩種可能的解，一個正角和一個負角。</p>
<p>We're going to explicitly choose the positive angle, which means that I can write this expression here.</p>
<p>我們將明確選擇正角，這意味著我可以在這裡寫這個表達式。</p>
<p>And now, we have what we call the inverse kinematic solution for this two-link robot.</p>
<p>現在，我們有了這個雙連桿機器人的逆運動學解決方案。</p>
<p>We have an expression for the two joined angles, Q1 and Q2 in terms of the end effector pose x and y, and a bunch of constants.</p>
<p>我們有兩個連接角 Q1 和 Q2 的表達式，根據末端執行器姿勢 x 和 y 以及一系列常數。</p>
<p>You notice that the two equations are not independent.</p>
<p>你注意到這兩個方程不是獨立的。</p>
<p>The equation for Q1, in fact, depends on the solution for Q2.</p>
<p>事實上，Q1 的方程取決於 Q2 的解。</p>
<p>In this case, Q2 is negative and we're going to write the solution for Q2 with a negative sign in front of the inverse cosine.</p>
<p>在這種情況下，Q2 是負數，我們將在反餘弦前用負號編寫 Q2 的解。</p>
<p>Now, we need to solve for Q1, so we're going to introduce this particular red triangle, the angle beta that we solved previously, and the angle gamma which is defined in terms of y and x.</p>
<p>現在，我們需要求解 Q1，因此我們將介紹這個特定的紅色三角形、我們之前求解的角度 beta 以及根據 y 和 x 定義的角度 gamma。</p>
<p>Now, we write a slightly different relationship between q1, gamma and beta, different to what we had before.</p>
<p>q1、ɣ和β之間的關西，和之前求的不同。</p>
<p>There’s a change of sign involved.</p>
<p>涉及到符號的變化。</p>
<p>Then, we can substitute all that previous equation and come up with this expression for q1.</p>
<p>然後我們可代換之前所有等式，並求得此q1方程式。</p>
<p>Again, there is a change of sign here.</p>
<p>同樣，這裡的符號發生了變化。</p>
<p>Previously, this was a negative sign.</p>
<p>先前，這是個負號。</p>
<p>And, here in summary form is the solution for the inverse kinematics of our two-link robot when it is in this particular configuration, where q2 is negative.</p>
<p>這是雙連桿機構在此逆向運動學的總形式，其中q2為負。</p>
<p>Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative.</p>
<p>讓我們比較兩個解決方案，q2為正和q2為負的情況。</p>
<p><img alt="" height="388" src="/images/W15-1.jpg" width="690"/></p>
<p><img caption="false" height="388" src="/images/W15-2.jpg" width="690"/></p>
<p><strong>Part two:</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/eIZuz1XCd0w" title="YouTube video player" width="560"></iframe></p>
<p><span>Here we have the same two link robot as we just looked at but this time we're going tosolve it using an analytical approach , that is we're going to rely much more on algebra ,particular linear algebra rather than geometry .</span></p>
<p>這裡我們有與我們相同的兩個鏈接機器人只是看著，但這次我們要使用分析方法解決它，即我們是否會更多地依賴代數，特定的線性代數而不是幾何。</p>
<p><span>We have an expression E , which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture , we can write the endefector pose as a sequence of elementary homogeneous transformations .</span></p>
<p>我們有一個表達式 E，它是齊次的表示姿勢的變換</p>
<p>A rotation by Q1 , a translation along the X direction by A1 , a rotation by Q2 and then a translation in the X direction by A2 .</p>
<p>Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移。</p>
<p>If I expand this out , multiply all the transformations together , I get the expression shown here ; a three by three homogeneous transformation matrix representing the pose of the robot's endefector.</p>
<p>如果我將其展開，將所有變換相乘，就會得到此處所示的表達式 E ;它是一個三乘三的齊次變換矩陣，表示機械手臂的最終的位置。</p>
<p>Now for this particular two link robot , we are only interested in the position of its endefector , it's X and Y co - ordinate and they are these two elements within the homogeneous transformation matrix , so I'm going to copy those out .</p>
<p>現在對於這個特殊的兩連桿機器人，我們只對它的最終位置感興趣，與它有關的是 X 和 Y 坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來。</p>
<p>So here again is our expression for X and Y and what we're going to do is a fairly common trick , we're going to square and add these two equations and I get a relationship that looks like this .</p>
<p>所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要將它平方並將這兩個方程相加，我得到一個看起來像這樣的關係式。</p>
<p>Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2.</p>
<p>現在我可以根據最終位置X和Y以及機械手臂的常數A1及A2來求出關節角度Q2。</p>
<p>Now what I'm going to do is apply the sum of angles identity .</p>
<p>現在我要做的是應用角度之和的特性。</p>
<p>I'm going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where ever I had sine Q2, I'm going to write S2.</p>
<p>我將展開這些項，Q1 的正弦加 Q2 或 Q1 的餘弦加 Q2，為了讓生活更輕鬆一點，我將建立一些分部，所以只要有 cos Q2，我會將其取代為C2並且在有正弦Q2的地方，我會將其取代為S2。</p>
<p>It's a fairly common shorthand when people are looking at robot kinematic equations.</p>
<p>當人們解決機械手臂運動學方程式時，這是一個相當常見的快速記法。</p>
<p>And here are the equations after making those substitutions.</p>
<p>這是進行替換後的方程式。</p>
<p>Looking at these two equations, I can see that they fall into a very well known form and for that form there is a very well known solution.</p>
<p>看看這兩個方程式，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個淺顯易見的解決方案。</p>
<p>So I'm going to consider just one of the equations, the equation for Y and using our well known identity and it's solution, I can determine the values for the variables little a, little b and little c and once l've determined those, then I can just write down the solution for Q1, which x is the equivalent of theta in this particular case.</p>
<p>所以我將只考慮其中一個方程，Y 的方程，並使用我們眾所周知的恆等式和它的解，我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些，然後我可以寫下 Q1 的解決方程，在這種特殊情況下，x 相當於<span> </span><span>θ</span>。</p>
<p>Here again is our expression for Q1, copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; X squared plus Y squared is equal to this particular complex expression.</p>
<p>這裡再次是我們對 Q1 的表達，從上一張幻燈片複製過來，我們可能還記得在我們早期的說明中，確定了這種特殊關係； X 平方加 Y 平方等於這個特定的複雜表達式。</p>
<p>So I can substitute that in and do some simplification and I end up with this slightly less complex expression for Q1.</p>
<p>因此，我可以將其替換並進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式。</p>
<p>And it is the same expression that I got following the geometric approach in the previous section.</p>
<p>這與我在上一節中遵循幾何方法求出的表達式一模一樣。</p>
<p><img caption="false" height="388" src="/images/W15-3.jpg" width="690"/></p>
<p><img caption="false" height="388" src="/images/W15-4.jpg" width="690"/></p>
<p></p>
<h2>W16</h2>
<h4>MTB_robot 的取放方塊流程規劃 (Process Planning):</h4>
<h4>1. Onshape 零組件繪製:</h4>
<p><img alt="" height="680" src="/images/W16-1.jpg" width="1344"/></p>
<p>繪製影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/htGesVY6Dmw" title="YouTube video player" width="560"></iframe></p>
<p>利用onshape建立各部份零組件</p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/Link1.stl">Link1</a></p>
<p><img alt="" height="390" src="/images/W16-2.jpg" width="693"/></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/Link2.stl">Link2</a></p>
<p><img caption="false" height="390" src="/images/W16-3.jpg" width="693"/></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/Link3.stl">Link3</a></p>
<p><img caption="false" height="390" src="/images/W16-4.jpg" width="693"/></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/Base.stl">Base</a></p>
<p><img alt="" height="390" src="/images/W16-5.jpg" width="693"/></p>
<p><img caption="false" height="333" src="/images/W16-6.jpg" width="693"/></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/MTB.dwg">MTB.dwg</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/MTB.stl">MTB.stl</a></p>
<h4>2. 建立 CoppeliaSim 4.1.0 MTB robot 場景</h4>
<p>檔案:</p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/MTB-2.ttt">MTB-2.ttt</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/MTB-2.lua">MTB-2.lua</a></p>
<p>操作與講解</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/BVY-9fBy-dU" title="YouTube video player" width="560"></iframe></p>
<p>下方為lua程式:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function move(j1,j2,j3,j4)
    modelBase=sim.getObjectAssociatedWithScript(sim.handle_self)
    modelName=sim.getObjectName(modelBase)
    jointHandle={}
    j={j1*math.pi/180,j2*math.pi/180,j3*math.pi/180,j4*math.pi/180}
    for i=1,4,1 do
        jointHandle[i]=sim.getObjectHandle('MTB_axis'..i)
        sim.wait(1)
    end
    for i=1,4,1 do
        sim.setJointPosition(jointHandle[i],j[i])
        sim.wait(1)
    end
    
end

function sysCall_threadmain()
    move(0,0,0,0)
    move(30,30,0,0)
    move(60,60,0.5,0)
    move(0,0,0,30)
    move(30,0,0,0)
    move(0,0,0,0)
    
    
end</pre>
<h4>3. 手臂末端加入 components-gripper-suction pad 吸盤</h4>
<p>檔案:</p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/W16_keyboard.ttt">W16_keyboard.ttt</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/mtb_w16b.lua">mtb_w16b.lua </a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/mtb_w16s.lua">mtb_w16s.lua</a></p>
<p>操作與講解</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/8QOJqG_lR1s" title="YouTube video player" width="560"></iframe></p>
<p>下方為主程式:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    axis1=sim.getObjectHandle('MTB_axis1')
    axis2=sim.getObjectHandle('MTB_axis2')
    axis3=sim.getObjectHandle('MTB_axis3')
    axis4=sim.getObjectHandle('MTB_axis4')
    mtb3=sim.getObjectHandle('MTB_link3')
    suctionPad=sim.getObjectHandle('suctionPad')
    BaseFrame=sim.getObjectHandle("BaseFrame")
    block =sim.getObjectHandle("block")
    deg1 = 0
    deg2 = 0
    distance3 = 0
    modelBase=sim.getObjectHandle(sim.handle_self)
    robotBase=modelBase
    robotName='suctionPad'
    deg = math.pi/180
    
end
function sysCall_actuation() 
    calibration = 0.0042
    message, auxiliaryData=sim.getSimulatorMessage()
        while message ~= -1 do
            key=auxiliaryData[1]
            sim.addStatusbarMessage('????? key:'..key)
            if (message==sim.message_keypress) then
            if (auxiliaryData[1]==112) then --p activate the suction pad
                sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),"active",'true')
                end -- if p
                if (auxiliaryData[1]==113) then --q deactivate the suction pad
                sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),'active','false')
                end -- if q
                if (auxiliaryData[1]==108) then --l 
                     deg1 = deg1+0.4*deg
                     sim.setJointPosition(axis1, deg1)
                end -- if l
                if (auxiliaryData[1]==114) then --r 
                     deg1 =deg1-0.4*deg
                     sim.setJointPosition(axis1, deg1)
                end -- if r
                 if (auxiliaryData[1]==103) then --g
                     deg2 =deg2-0.4*deg
                     sim.setJointPosition(axis2, deg2)
                end -- if r
                 if (auxiliaryData[1]==104) then --h 
                     deg2 =deg2+0.4*deg
                     sim.setJointPosition(axis2, deg2)
                end -- if r
                if (auxiliaryData[1]==100) then --d 
                     distance3 = distance3 + 0.03 + calibration
                     sim.setJointPosition(axis3, distance3)
                end -- if d
                if (auxiliaryData[1]==117) then --u
                     distance3 = distance3 - 0.03 - calibration
                     sim.setJointPosition(axis3, distance3)
                end -- if u
                if (auxiliaryData[1]==98) then --b
                     deg1 =0
                     deg2 =0
                     sim.setJointPosition(axis1, deg1)
                     sim.setJointPosition(axis2, deg2)
                end -- if b
           end  -- if
    message, auxiliaryData=sim.getSimulatorMessage()
        end -- while
end -- function
</pre>
<p>下方為吸盤程式:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    s=sim.getObjectHandle('suctionPadSensor')
    l=sim.getObjectHandle('suctionPadLoopClosureDummy1')
    l2=sim.getObjectHandle('suctionPadLoopClosureDummy2')
    b=sim.getObjectHandle('suctionPad')
    suctionPadLink=sim.getObjectHandle('suctionPadLink')

    infiniteStrength=sim.getScriptSimulationParameter(sim.handle_self,'infiniteStrength')
    maxPullForce=sim.getScriptSimulationParameter(sim.handle_self,'maxPullForce')
    maxShearForce=sim.getScriptSimulationParameter(sim.handle_self,'maxShearForce')
    maxPeelTorque=sim.getScriptSimulationParameter(sim.handle_self,'maxPeelTorque')

    sim.setLinkDummy(l,-1)
    sim.setObjectParent(l,b,true)
    m=sim.getObjectMatrix(l2,-1)
    sim.setObjectMatrix(l,-1,m)
end

function sysCall_cleanup() 
--[[
    sim.setLinkDummy(l,-1)
    sim.setObjectParent(l,b,true)
    m=sim.getObjectMatrix(l2,-1)
    sim.setObjectMatrix(l,-1,m)
]]--
end 

function sysCall_sensing() 
    parent=sim.getObjectParent(l)
    if (sim.getScriptSimulationParameter(sim.handle_self,'active')==false) then
        if (parent~=b) then
            sim.setLinkDummy(l,-1)
            sim.setObjectParent(l,b,true)
            m=sim.getObjectMatrix(l2,-1)
            sim.setObjectMatrix(l,-1,m)
        end
    else
        if (parent==b) then
            -- Here we want to detect a respondable shape, and then connect to it with a force sensor (via a loop closure dummy dummy link)
            -- However most respondable shapes are set to "non-detectable", so "sim.readProximitySensor" or similar will not work.
            -- But "sim.checkProximitySensor" or similar will work (they don't check the "detectable" flags), but we have to go through all shape objects!
            index=0
            while true do
                shape=sim.getObjects(index,sim.object_shape_type)
                if (shape==-1) then
                    break
                end
                if (shape~=b) and (sim.getObjectInt32Parameter(shape,sim.shapeintparam_respondable)~=0) and (sim.checkProximitySensor(s,shape)==1) then
                    -- Ok, we found a respondable shape that was detected
                    -- We connect to that shape:
                    -- Make sure the two dummies are initially coincident:
                    sim.setObjectParent(l,b,true)
                    m=sim.getObjectMatrix(l2,-1)
                    sim.setObjectMatrix(l,-1,m)
                    -- Do the connection:
                    sim.setObjectParent(l,shape,true)
                    sim.setLinkDummy(l,l2)
                    break
                end
                index=index+1
            end
        else
            -- Here we have an object attached
            if (infiniteStrength==false) then
                -- We might have to conditionally beak it apart!
                result,force,torque=sim.readForceSensor(suctionPadLink) -- Here we read the median value out of 5 values (check the force sensor prop. dialog)
                if (result&gt;0) then
                    breakIt=false
                    if (force[3]&gt;maxPullForce) then breakIt=true end
                    sf=math.sqrt(force[1]*force[1]+force[2]*force[2])
                    if (sf&gt;maxShearForce) then breakIt=true end
                    if (torque[1]&gt;maxPeelTorque) then breakIt=true end
                    if (torque[2]&gt;maxPeelTorque) then breakIt=true end
                    if (breakIt) then
                        -- We break the link:
                        sim.setLinkDummy(l,-1)
                        sim.setObjectParent(l,b,true)
                        m=sim.getObjectMatrix(l2,-1)
                        sim.setObjectMatrix(l,-1,m)
                    end
                end
            end
        end
    end
    if (sim.getSimulationState()==sim.simulation_advancing_lastbeforestop) then
        sim.setLinkDummy(l,-1)
        sim.setObjectParent(l,b,true)
        m=sim.getObjectMatrix(l2,-1)
        sim.setObjectMatrix(l,-1,m)
    end
end </pre>
<h4>4. 逆向運動學函式</h4>
<p>檔案:</p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/MTB-4.ttt">MTB-4.ttt</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/4.lua">4.lua</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/v41s.lua">v41s.lua</a></p>
<p>操作與講解:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/9We_ZKDOjbc" title="YouTube video player" width="560"></iframe></p>
<p><span>根據 W15 線上課程內容之 Inverse Kinematics 方程式 (</span><a href="https://www.youtube.com/watch?v=IKOGwoJ2HLk&amp;t=35s">影片1</a><span><span> </span>或</span><a href="https://www.youtube.com/watch?v=eIZuz1XCd0w&amp;t=183s">影片2</a><span>)，- (0.2, 0.7, 0.05) 與 (-0.3, -0.55, 0.05)，使用以上條件計算出角度</span></p>
<p><span>(0.2, 0.7, 0.05)</span></p>
<p><span><img alt="" height="961" src="/images/W16-7.jpg" width="1296"/></span></p>
<p><span>(-0.3, -0.55, 0.05)</span></p>
<p><span><img caption="false" height="997" src="/images/W16-8.jpg" width="1296"/></span></p>
<p><span>下方為主程式:</span></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function move(j1,j2,j3,j4,enable)
    modelBase=sim.getObjectAssociatedWithScript(sim.handle_self)
    modelName=sim.getObjectName(modelBase)
    jointHandle={}
    j={j1*math.pi/180,j2*math.pi/180,j3*math.pi/180,j4*math.pi/180}
    for i=1,4,1 do
        jointHandle[i]=sim.getObjectHandle('MTB_axis'..i)
        sim.wait(1)
    end
    for i=1,4,1 do
        sim.setJointPosition(jointHandle[i],j[i])
        sim.wait(1)
    end
    
    if enable then
        sim.setIntegerSignal(modelName .."activity",1)
    else
        sim.setIntegerSignal(modelName .."activity",0)
    end
end

function sysCall_threadmain()
    move(0,0,0,0,false)
    move(0,0,1.9,0,true)
    move(0,0,0,0,true)
    move(43.79,-66.2053,0,0,false)
    move(0,0,0,0,0)
    move(43.79,-66.2053,0,0,false)
    move(43.79,-66.2053,1.9,0,true)
    move(43.79,-66.2053,0,0,true)
    move(-158.2529,-87.7894,0,0,false)
    move(0,0,0,0,false)
    move(-158.2529,-87.7894,0,0,false)
    move(-158.2529,-87.7894,1.9,0,true)
    move(-158.2529,-87.7894,0,0,true)
    move(0,0,0,0,false)
end</pre>
<p>下方為吸盤程式:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    modelBase=sim.getObjectHandle(sim.handle_self)
    robotBase=modelBase
    while true do
        robotBase=sim.getObjectParent(robotBase)
        if robotBase==-1 then
            robotName='MTB_Robot'
            break
        end
        robotName=sim.getObjectName(robotBase)
        suffix,suffixlessName=sim.getNameSuffix(robotName)
        if suffixlessName=='MTB_Robot' then
            break
        end
    end
    
    s=sim.getObjectHandle('suctionPadSensor')
    l=sim.getObjectHandle('suctionPadLoopClosureDummy1')
    l2=sim.getObjectHandle('suctionPadLoopClosureDummy2')
    b=sim.getObjectHandle('suctionPadBody')
    sim.setLinkDummy(l,-1)
    sim.setObjectParent(l,b,true)
    m=sim.getObjectMatrix(l2,-1)
    sim.setObjectMatrix(l,-1,m)
    suctionPadLink=sim.getObjectHandle('suctionPadLink')
    local gripperBase=sim.getObjectHandle(sim.handle_self)
    infiniteStrength=true
    maxPullForce=3
    maxShearForce=1
    maxPeelTorque=0.1

end

function sysCall_cleanup() 
    sim.setLinkDummy(l,-1)
    sim.setObjectParent(l,b,true)
    m=sim.getObjectMatrix(l2,-1)
    sim.setObjectMatrix(l,-1,m)
end 

function sysCall_sensing() 
    parent=sim.getObjectParent(l)
    local sig=sim.getIntegerSignal(robotName .."activity")
    if (not sig) or (sig==0) then
        if (parent~=b) then
            sim.setLinkDummy(l,-1)
            sim.setObjectParent(l,b,true)
            m=sim.getObjectMatrix(l2,-1)
            sim.setObjectMatrix(l,-1,m)
        end
    else
        if (parent==b) then
            index=0
            while true do
                shape=sim.getObjects(index,sim.object_shape_type)
                if (shape==-1) then
                    break
                end
                local res,val=sim.getObjectInt32Parameter(shape,sim.shapeintparam_respondable)
                if (shape~=b) and (val~=0) and (sim.checkProximitySensor(s,shape)==1) then
                    -- Ok, we found a respondable shape that was detected
                    -- We connect to that shape:
                    -- Make sure the two dummies are initially coincident:
                    sim.setObjectParent(l,b,true)
                    m=sim.getObjectMatrix(l2,-1)
                    sim.setObjectMatrix(l,-1,m)
                    -- Do the connection:
                    sim.setObjectParent(l,shape,true)
                    sim.setLinkDummy(l,l2)
                    break
                end
                index=index+1
            end
        else
            -- Here we have an object attached
            if (infiniteStrength==false) then
                -- We might have to conditionally beak it apart!
                result,force,torque=sim.readForceSensor(suctionPadLink) -- Here we read the median value out of 5 values (check the force sensor prop. dialog)
                if (result&gt;0) then
                    breakIt=false
                    if (force[3]&gt;maxPullForce) then breakIt=true end
                    sf=math.sqrt(force[1]*force[1]+force[2]*force[2])
                    if (sf&gt;maxShearForce) then breakIt=true end
                    if (torque[1]&gt;maxPeelTorque) then breakIt=true end
                    if (torque[2]&gt;maxPeelTorque) then breakIt=true end
                    if (breakIt) then
                        -- We break the link:
                        sim.setLinkDummy(l,-1)
                        sim.setObjectParent(l,b,true)
                        m=sim.getObjectMatrix(l2,-1)
                        sim.setObjectMatrix(l,-1,m)
                    end
                end
            end
        end
    end
end 
</pre>
<h4>5. Python remote API 逆向運動學函式</h4>
<p>檔案:</p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/MTB-5.ttt">MTB-5.ttt</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/MTB-5Api.py">MTB-5Api.py</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/sim.py">sim.py</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/simConst.py">simConst.py</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/sim.cpython-39.pyc">sim.cpython-39.pyc</a></p>
<p><a href="https://github.com/40823108/cd2021/blob/main/downloads/simConst.cpython-39.pyc">simConst.cpython-39.pyc</a></p>
<p>操作與講解:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/6fKVD-XLqMw" title="YouTube video player" width="560"></iframe></p>
<p>下方為Api主程式:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import sys
import time
import math

vrep.simxFinish(-1)
clientID = vrep.simxStart('127.0.0.1', 19997, True, True, 5000, 5)

if clientID!= -1:
    print("Connected to remote server")
else:
    print('Connection not successful')
    
    vrep.simxStartSimulation(clientID, vrep.simx_opmode_oneshot)

def move(j1,j2,j3):
    ret,joint1=vrep.simxGetObjectHandle(clientID,"joint1",vrep.simx_opmode_blocking)
    ret,joint2=vrep.simxGetObjectHandle(clientID,"joint2",vrep.simx_opmode_blocking)
    ret,joint3=vrep.simxGetObjectHandle(clientID,"joint3",vrep.simx_opmode_blocking)
    jointHandle=[joint1,joint2,joint3]
    j=[j1*math.pi/180,j2*math.pi/180,j3*math.pi/180]
    for i in range(3):
        vrep.simxSetJointPosition(clientID,jointHandle[i],j[i],vrep.simx_opmode_oneshot)
        time.sleep(0.5)
def suck():
    vrep.simxSetIntegerSignal(clientID,"activity",1,vrep.simx_opmode_oneshot_wait)
def quit():
    vrep.simxSetIntegerSignal(clientID,"activity",0,vrep.simx_opmode_oneshot_wait)



while True:
    move(0,0,0)
    quit()
    move(0,0,1.75)
    suck()
    move(0,0,0)
    move(43.79,-66.2053,0)
    quit()
    move(0,0,0)
    move(43.79,-66.2053,0)
    move(43.79,-66.2053,1.75)
    suck()
    move(43.79,-66.2053,0)
    move(0,0,0)
    move(-158.2529,-87.7894,0)
    quit()
    move(0,0,0)
    move(-158.2529,-87.7894,0)
    move(-158.2529,-87.7894,1.75)
    suck()
    move(-158.2529,-87.7894,0)

</pre>
<h2>W17</h2>
<p>本週利用課程時段逐一由每位同學線上展示與課程評分相關的內容, 並同步進行評分, 請及時準備好接受檢視。</p>
<p><span>cda W17 線上課程: <a href="https://meet.google.com/dje-tyxm-tir">線上課程</a></span></p>
<p><span>cda W17 自評表單: <a href="http://c.kmol.info:8000/idn198jfv4iz">自評表單</a></span></p>
<p>cda W17 互評表單: <a href="https://forms.gle/sZhtfsiWLM8uz3aDA">互評表單</a></p>
<p>下方為本週每位同學自評結果與修課生之學號:</p>
<p><img alt="" height="1170" src="/images/W17-1.JPG" width="338"/></p>
<p>課程結束後為每位學員做互評。(互評表單於上方)</p>
<h2>W18</h2>
<h1>Stage1-ag1</h1>
<h1>Stage2-ag1</h1>
<h1>Stage3-ag1</h1>
<h1>phone webcam</h1>
<p>為因應校方公告:</p>
<p><a href="http://mde.tw/cd2021/downloads/%E3%80%8C%E5%9A%B4%E9%87%8D%E7%89%B9%E6%AE%8A%E5%82%B3%E6%9F%93%E6%80%A7%E8%82%BA%E7%82%8E%E3%80%8D%E7%96%AB%E6%83%85%E8%AA%B2%E7%A8%8B%E5%BD%88%E6%80%A7%E8%99%95%E7%90%86%E4%BA%8B%E9%A0%85_%E9%81%A0%E8%B7%9D%E6%95%99%E5%AD%B8%E5%85%AC%E5%91%8A_0515D(%E4%B8%AD%E8%8B%B1%E7%89%88%E6%9C%AC).pdf">「嚴重特殊傳染性肺炎」疫情課程彈性處理事項_遠距教學公告_0515D(中英版本).pdf</a></p>
<p>5月17日至5月30日全校所有課程改採遠距教學。</p>
<p>需要使用到麥克風、網路攝影機、顯示器、電腦、音響、直播軟體、串流平台，如果無網路攝影機可以使用手機當作視訊鏡頭同時也可以使用手機收音。</p>
<p>後續將介紹如何使用手機鏡頭變成網路攝影機並附帶麥克風功能。</p>
<p></p>
<h2>ios for Webcam</h2>
<h4><span id="lwptoc1"><span class="td_text_columns_two_cols"><strong><span class="has-inline-color has-vivid-cyan-blue-color">［iVCam的幾大特點］</span></strong></span></span></h4>
<ul>
<li><strong>低延遲！高速度！高質量的即時視頻</strong></li>
<li><strong>前後向鏡頭畫面都支援，並且可以即時切換</strong></li>
<li><strong>只需要Wi-Fi或是USB連接手機，簡單應用無阻礙</strong></li>
<li><strong>音頻也能接收，將手機變為PC的無線麥克風使用</strong></li>
<li><strong>其他數不清的遠端執行優點</strong></li>
</ul>
<h4><strong>STEP1-在PC/手機上下載iVcam:</strong></h4>
<p>使用PC並Google搜尋iVcam，並點擊官網連結<strong><a href="https://www.e2esoft.com/ivcam/" rel="noreferrer noopener" target="_blank">至官網</a></strong>會出現下方圖片，點擊紅框處下載。</p>
<p><img caption="false" height="1080" src="/images/Webcam-1.jpg" width="1920"/></p>
<p>下載完成之資料夾:</p>
<p>下載安裝完成後必須重啟起計算機(windows)，這是<strong>軟件完成計算機上driVer設置的必需步驟</strong> 。如果不重新啟動，將無法連接。</p>
<p><strong><img caption="false" height="1080" src="/images/Webcam-2.jpg" width="1920"/></strong></p>
<p>使用機型: iphone XR</p>
<p>軟體版本: iOS 14.0.1</p>
<p>iVcam與iphone兼容上述型號以下版本</p>
<p>接下來開啟手機點擊APP Store下方紅框處:</p>
<p><img alt="" height="1792" src="/images/Webcam-3.jpg" width="828"/></p>
<p>搜尋iVcam，點擊下載並開啟:</p>
<p><img alt="" height="1792" src="/images/Webcam-4.jpg" width="828"/></p>
<h4><strong>STEP2－將電腦與手機連結到同一個Wi-Fi</strong></h4>
<p>必須連結到同個IP才能成功使用手機鏡頭成為webcam鏡頭。</p>
<p>下圖為未連結狀態(iphone):</p>
<p><img alt="" height="1792" src="/images/Webcam-5.jpg" width="828"/></p>
<p>下圖為未連結狀態(PC windows):</p>
<p><img alt="" height="960" src="/images/Webcam-6.jpg" width="1706"/></p>
<p>[iVcam]成功連結畫面:</p>
<p><img alt="" height="1792" src="/images/Webcam-10.jpg" width="828"/></p>
<p><img alt="" height="960" src="/images/Webcam-7.jpg" width="1706"/></p>
<p>只要手機跟電腦有順利連接到Wi-Fi或USB的話，兩邊就會自動配對成功！螢幕上的三個功能分別是「拍照」、「擷取螢幕畫面」和「錄影」。</p>
<h4><strong>STEP3－測試電腦與手機的鏡頭/麥克風</strong></h4>
<p>順利連接後，可透過「<strong><a href="https://toolskk.com/webcam-mic-test">Test Webcam and Microphone Online</a></strong>」，這個網站可供測試電腦攝影機&amp;麥克風，確認鏡頭跟麥克風是否有畫面及成功收音！</p>
<h4><strong>STEP4-Bonus－調整視訊的設定（尺寸、畫質、音質 etc.）</strong></h4>
<p><strong><img alt="" height="442" src="/images/Webcam-8.jpg" width="374"/></strong></p>
<p><strong>↑ 調整iVCam：直向、橫向、尺寸、畫質、音質 etc.</strong></p>
<p><strong><img alt="" height="281" src="/images/Webcam-9.jpg" width="548"/><br/></strong></p>
<p><strong>↑ 調整iVCam：特效、鏡像畫面、前置後置鏡頭 etc.</strong></p>
<p>這幾個選項，隨時可以依照自己的喜好，或是連線的穩定性，來做調整！</p>
<h4><strong>STEP5-使用OBS擷取手機鏡頭Webcam Setting</strong></h4>
<p>開啟OBS點擊擷取顯示器:</p>
<p><img caption="false" height="605" src="/images/Webcam-11.jpg" width="718"/></p>
<p>出現視訊擷取對話框:</p>
<p><img alt="" height="345" src="/images/Webcam-12.jpg" width="352"/></p>
<p>接下來會出現"屬性[視訊擷取裝置]"，將裝置選項選成:e2eSoft iVCam，點擊確定。</p>
<p><img alt="" height="612" src="/images/Webcam-13.jpg" width="721"/></p>
<h4><strong>STEP6-成功使用OBS擷取手機鏡頭Webcam</strong></h4>
<p><strong><img alt="" height="960" src="/images/Webcam-14.jpg" width="1706"/></strong></p>
<h2>Android for Webcam</h2>
<h4><strong>step1.首先使用手機進入google play商店，下載下圖程式。</strong></h4>
<p><strong><img alt="" height="1169" src="/images/Webcam-15.jpg" width="1079"/></strong></p>
<h4><strong>step2.使用電腦點擊下方網址下載程式。</strong></h4>
<p><strong><a href="https://www.dev47apps.com/droidcam/windows/">https://www.dev47apps.com/droidcam/windows/</a><span> </span></strong></p>
<p><strong><span><img alt="" height="541" src="/images/Webcam-16.jpg" width="999"/></span></strong></p>
<h4><strong>step3.電腦安裝後開啟程式，滑鼠點擊USB圖示</strong></h4>
<p><strong><img alt="" height="511" src="/images/Webcam-17.jpg" width="427"/></strong></p>
<h4><strong>step4.手機同時打開下載好的Droidcam，畫面如下:</strong></h4>
<p><strong><img alt="" height="1537" src="/images/Webcam-18.jpg" width="1067"/></strong></p>
<h4><strong>step5.手機使用USB數據線連接電腦按下電腦軟體視窗中的START，如下圖:</strong></h4>
<p><strong><img alt="" height="511" src="/images/Webcam-19.jpg" width="427"/></strong></p>
<h4><strong>step6.在OBS中使用手機鏡頭取代webcam，進行測試。</strong></h4>
<h1>Github sever issue</h1>
<p>2021/5/16在推送改版時發生github page無法建構頁面問題，<span>在github pages設定中有出現警告your site is having problems building :unable to build page.</span></p>
<p><span>使用git reset HEAD^退回版本也不無法進行改版，如果持續改版會收到下方郵件:</span><a class="link" href="https://docs.github.com/articles/troubleshooting-jekyll-builds" rel="nofollow noopener noreferrer" target="_blank">https://docs.github.com/articles/troubleshooting-jekyll-builds</a></p>
<p><img alt="" height="1792" src="/images/githubpage-1.jpg" width="828"/></p>
<p>倉儲改版會出現無法轉檔的情形</p>
<p><img alt="" height="960" src="/images/githubpage-2.jpg" width="1706"/></p>
<p><span>本想使用git log --oneline來排查commit ID並用git reset HEAD^退回版本來解決，經過多次退回版本無效</span></p>
<p><span><img alt="" height="511" src="/images/githubpage-3.jpg" width="980"/></span></p>
<p><span><img alt="" height="513" src="/images/githubpage-4.jpg" width="977"/></span></p>
<p><span><img alt="" height="511" src="/images/githubpage-5.jpg" width="977"/></span></p>
<p><span>最後於Gitter發問也有學員發生同樣問題，最後由老師在github官網發現是github sever的問題</span></p>
<p><span>於2021/5/16 P.M. 10:00-11:00 Github sever 恢復正常由老師測試可否正常轉換</span></p>
<p><span><img caption="false" height="1080" src="/images/githubpage-6.jpg" width="1920"/></span></p>
<p><span><img caption="false" height="1080" src="/images/githubpage-7.jpg" width="1920"/><br/></span></p>
<p><span><img alt="" height="960" src="/images/githubpage-8.jpg" width="1706"/></span></p>
<p><span>論壇處也有許多Github用戶發生同樣問題!</span></p>